apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: app-globex-ui-pipeline-
  annotations:
    chains.tekton.dev/cert-pipelinerun-f9dfbc9f-2da8-4606-8c59-9efd01a15345: ''
    chains.tekton.dev/chain-pipelinerun-f9dfbc9f-2da8-4606-8c59-9efd01a15345: ''
    chains.tekton.dev/payload-pipelinerun-f9dfbc9f-2da8-4606-8c59-9efd01a15345: >-
      
    chains.tekton.dev/signature-pipelinerun-f9dfbc9f-2da8-4606-8c59-9efd01a15345: >-
      MEUCIBR9BWUV/vJYSEBUgdX7wgZLS+ka43Oik+jQHlO3iBGaAiEAwcRjOoDI7nUraQqT5kFRN5R1lmenlWPDu8gNys0jDBM=
    chains.tekton.dev/signed: 'true'
    chains.tekton.dev/transparency: 'https://rekor.sigstore.dev/api/v1/log/entries?logIndex=43868637'
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Pipeline","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"globex-ui-pipeline-local-cluster"},"name":"app-globex-ui-pipeline","namespace":"ci"},"spec":{"params":[{"name":"REPO_HOST","type":"string"},{"name":"COMMIT_SHA","type":"string"},{"name":"TLSVERIFY","type":"string"},{"name":"BUILD_EXTRA_ARGS","type":"string"},{"name":"IMAGE_REPO","type":"string"},{"name":"IMAGE_TAG","type":"string"},{"name":"MANIFEST_FILE","type":"string"},{"name":"MANIFEST_FILE_PROD","type":"string"},{"name":"MANIFEST_REPO","type":"string"},{"name":"MANIFEST_REPO_NAME","type":"string"},{"name":"GIT_REF","type":"string"},{"name":"COMMIT_DATE","type":"string"},{"name":"COMMIT_AUTHOR","type":"string"},{"name":"COMMIT_MESSAGE","type":"string"},{"name":"GIT_REPO","type":"string"},{"name":"SONARQUBE_HOST_URL","type":"string"},{"name":"SONARQUBE_PROJECT_KEY","type":"string"},{"name":"SONARQUBE_PROJECT_SECRET","type":"string"},{"name":"CYCLONEDX_HOST_URL","type":"string"}],"tasks":[{"name":"fetch-source","params":[{"name":"url","value":"$(params.GIT_REPO)"},{"name":"revision","value":"$(params.GIT_REF)"},{"name":"deleteExisting","value":"true"}],"taskRef":{"kind":"ClusterTask","name":"git-clone"},"workspaces":[{"name":"output","workspace":"shared-data"}]},{"name":"scan-source","params":[{"name":"sonarqubeHostUrl","value":"$(params.SONARQUBE_HOST_URL)"},{"name":"sonarqubeProjectKey","value":"$(params.SONARQUBE_PROJECT_KEY)"},{"name":"sonarqubeProjectSecret","value":"$(params.SONARQUBE_PROJECT_SECRET)"}],"runAfter":["fetch-source"],"taskRef":{"kind":"Task","name":"scan-code"},"workspaces":[{"name":"repository","workspace":"shared-data"}]},{"name":"verify-source","runAfter":["fetch-source"],"taskRef":{"kind":"Task","name":"verify-source-code"},"workspaces":[{"name":"repository","workspace":"shared-data"},{"name":"secrets","workspace":"secrets"}]},{"name":"build-sign-image","params":[{"name":"TLSVERIFY","value":"$(params.TLSVERIFY)"},{"name":"BUILD_EXTRA_ARGS","value":"--label=io.openshift.build.commit.author='$(params.COMMIT_AUTHOR)'
      --label=io.openshift.build.commit.date='$(params.COMMIT_DATE)'
      --label=io.openshift.build.commit.id='$(params.COMMIT_SHA)'
      --label=io.openshift.build.commit.message='$(params.COMMIT_MESSAGE)'
      --label=io.openshift.build.commit.ref='$(params.GIT_REF)'
      --ulimit=nofile=4096:4096"},{"name":"IMAGE","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"}],"retries":1,"runAfter":["scan-source","verify-source"],"taskRef":{"kind":"ClusterTask","name":"buildah"},"workspaces":[{"name":"source","workspace":"shared-data"}]},{"name":"acs-image-check","params":[{"name":"rox_central_endpoint","value":"stackrox-endpoint"},{"name":"rox_api_token","value":"stackrox-secret"},{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"insecure-skip-tls-verify","value":"true"}],"runAfter":["build-sign-image"],"taskRef":{"kind":"Task","name":"acs-image-check"}},{"name":"acs-image-scan","params":[{"name":"rox_central_endpoint","value":"stackrox-endpoint"},{"name":"rox_api_token","value":"stackrox-secret"},{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"insecure-skip-tls-verify","value":"true"}],"runAfter":["build-sign-image"],"taskRef":{"kind":"Task","name":"acs-image-scan"}},{"name":"generate-sbom","params":[{"name":"cyclonedxHostUrl","value":"$(params.CYCLONEDX_HOST_URL)"}],"runAfter":["build-sign-image"],"taskRef":{"kind":"Task","name":"generate-sbom"},"workspaces":[{"name":"repository","workspace":"shared-data"}]},{"name":"update-dev-manifest","params":[{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"configuration_file","value":"$(params.MANIFEST_FILE)"},{"name":"repository","value":"$(params.MANIFEST_REPO)"},{"name":"git_user_name","value":"$(params.COMMIT_AUTHOR)"}],"runAfter":["acs-image-check","acs-image-scan","generate-sbom"],"taskRef":{"kind":"Task","name":"update-manifest"}},{"name":"acs-deploy-check","params":[{"name":"rox_central_endpoint","value":"stackrox-endpoint"},{"name":"rox_api_token","value":"stackrox-secret"},{"name":"gitRepositoryUrl","value":"$(params.MANIFEST_REPO)"},{"name":"gitRepositoryRevision","value":"main"},{"name":"insecure-skip-tls-verify","value":"true"}],"runAfter":["update-dev-manifest"],"taskRef":{"kind":"Task","name":"acs-deploy-check"}},{"name":"verify-tlog-signature","params":[{"name":"registrySecret","value":"image-registry-secret"},{"name":"cosignSecret","value":"cosign-secret"},{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"}],"runAfter":["update-dev-manifest"],"taskRef":{"kind":"Task","name":"rekor-verify"}},{"name":"create-prod-manifest-branch","params":[{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"configuration_file","value":"$(params.MANIFEST_FILE_PROD)"},{"name":"repository","value":"$(params.MANIFEST_REPO)"},{"name":"git_user_name","value":"$(params.COMMIT_AUTHOR)"},{"name":"target-branch","value":"feature-for-$(params.COMMIT_SHA)"}],"runAfter":["acs-deploy-check","verify-tlog-signature"],"taskRef":{"kind":"Task","name":"pr-manifest"}},{"name":"issue-prod-pull-request","params":[{"name":"GITHUB_HOST_URL","value":"$(params.REPO_HOST)"},{"name":"API_PATH_PREFIX","value":"/api/v1"},{"name":"GITHUB_TOKEN_SECRET_NAME","value":"gitea-token"},{"name":"REPO_FULL_NAME","value":"$(params.MANIFEST_REPO_NAME)"},{"name":"HEAD","value":"feature-for-$(params.COMMIT_SHA)"},{"name":"BASE","value":"main"},{"name":"BODY","value":"Update
      prod image for
      $(params.COMMIT_MESSAGE)"},{"name":"TITLE","value":"Production update:
      $(params.COMMIT_MESSAGE)"}],"runAfter":["create-prod-manifest-branch"],"taskRef":{"kind":"Task","name":"gitea-open-pull-request"}}],"workspaces":[{"name":"shared-data"},{"name":"maven-settings"},{"name":"signature"},{"name":"secrets"}]}}
  resourceVersion: '1414242'
  name: app-globex-ui-pipeline-tj956
  namespace: ci
  labels:
    app.kubernetes.io/instance: globex-ui-pipeline-local-cluster
    tekton.dev/pipeline: app-globex-ui-pipeline
    triggers.tekton.dev/eventlistener: app-globex-ui-event-listener
    triggers.tekton.dev/trigger: build-from-push-globex-ui
    triggers.tekton.dev/triggers-eventid: 9382c71a-ae20-4452-8010-7ee319038863
spec:
  params:
    - name: REPO_HOST
      value: gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
    - name: GIT_REPO
      value: >-
        https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git
    - name: TLSVERIFY
      value: 'true'
    - name: BUILD_EXTRA_ARGS
      value: $(tt.params.build_extra_args)
    - name: IMAGE_REPO
      value: >-
        my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui
    - name: IMAGE_TAG
      value: main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
    - name: MANIFEST_FILE
      value: gitops/application/globex/overlays/dev/kustomization.yaml
    - name: MANIFEST_FILE_PROD
      value: gitops/application/globex/overlays/prod/kustomization.yaml
    - name: MANIFEST_REPO
      value: >-
        https://dev-user:openshift@gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/securing-software-supply-chain
    - name: MANIFEST_REPO_NAME
      value: dev-user/securing-software-supply-chain
    - name: COMMIT_SHA
      value: 8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
    - name: GIT_REF
      value: main
    - name: COMMIT_DATE
      value: '2023-10-18T09:06:53Z'
    - name: COMMIT_AUTHOR
      value: dev-user
    - name: COMMIT_MESSAGE
      value: |
        test
    - name: SONARQUBE_HOST_URL
      value: >-
        https://sonarqube-sonarqube.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
    - name: SONARQUBE_PROJECT_KEY
      value: globex-ui
    - name: SONARQUBE_PROJECT_SECRET
      value: globex-ui-sonarqube-secret
    - name: CYCLONEDX_HOST_URL
      value: >-
        https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
  pipelineRef:
    name: app-globex-ui-pipeline
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
    - name: shared-data
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 3Gi
        status: {}
    - emptyDir: {}
      name: maven-settings
    - emptyDir: {}
      name: signature
    - name: secrets
      secret:
        secretName: gpg-public-key
status:
  completionTime: '2023-10-18T09:13:12Z'
  conditions:
    - lastTransitionTime: '2023-10-18T09:13:12Z'
      message: 'Tasks Completed: 7 (Failed: 1, Cancelled 0), Skipped: 5'
      reason: Failed
      status: 'False'
      type: Succeeded
  pipelineSpec:
    params:
      - name: REPO_HOST
        type: string
      - name: COMMIT_SHA
        type: string
      - name: TLSVERIFY
        type: string
      - name: BUILD_EXTRA_ARGS
        type: string
      - name: IMAGE_REPO
        type: string
      - name: IMAGE_TAG
        type: string
      - name: MANIFEST_FILE
        type: string
      - name: MANIFEST_FILE_PROD
        type: string
      - name: MANIFEST_REPO
        type: string
      - name: MANIFEST_REPO_NAME
        type: string
      - name: GIT_REF
        type: string
      - name: COMMIT_DATE
        type: string
      - name: COMMIT_AUTHOR
        type: string
      - name: COMMIT_MESSAGE
        type: string
      - name: GIT_REPO
        type: string
      - name: SONARQUBE_HOST_URL
        type: string
      - name: SONARQUBE_PROJECT_KEY
        type: string
      - name: SONARQUBE_PROJECT_SECRET
        type: string
      - name: CYCLONEDX_HOST_URL
        type: string
    tasks:
      - name: fetch-source
        params:
          - name: url
            value: >-
              https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git
          - name: revision
            value: main
          - name: deleteExisting
            value: 'true'
        taskRef:
          kind: ClusterTask
          name: git-clone
        workspaces:
          - name: output
            workspace: shared-data
        status:
          completionTime: '2023-10-18T09:07:27Z'
          conditions:
            - lastTransitionTime: '2023-10-18T09:07:27Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: app-globex-ui-pipeline-tj956-fetch-source-pod
          startTime: '2023-10-18T09:07:06Z'
          steps:
            - container: step-clone
              imageID: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
              name: clone
              terminated:
                containerID: >-
                  cri-o://bb799be6043f4dcdab16ab63e5c10f41657dfc16104547aa1007bd9bd44ba780
                exitCode: 0
                finishedAt: '2023-10-18T09:07:26Z'
                message: >-
                  [{"key":"commit","value":"8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07","type":1},{"key":"url","value":"https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git","type":1}]
                reason: Completed
                startedAt: '2023-10-18T09:07:26Z'
          taskResults:
            - name: commit
              type: string
              value: 8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
            - name: url
              type: string
              value: >-
                https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git
          taskSpec:
            description: >-
              These Tasks are Git tasks to work with repositories used by other
              tasks in your Pipeline.

              The git-clone Task will clone a repo from the provided url into
              the output Workspace. By default the repo will be cloned into the
              root of your Workspace. You can clone into a subdirectory by
              setting this Task's subdirectory param. This Task also supports
              sparse checkouts. To perform a sparse checkout, pass a list of
              comma separated directory patterns to this Task's
              sparseCheckoutDirectories param.
            params:
              - description: Repository URL to clone from.
                name: url
                type: string
              - default: ''
                description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
                name: revision
                type: string
              - default: ''
                description: Refspec to fetch before checking out revision.
                name: refspec
                type: string
              - default: 'true'
                description: Initialize and fetch git submodules.
                name: submodules
                type: string
              - default: '1'
                description: >-
                  Perform a shallow clone, fetching only the most recent N
                  commits.
                name: depth
                type: string
              - default: 'true'
                description: >-
                  Set the `http.sslVerify` global git config. Setting this to
                  `false` is not advised unless you are sure that you trust your
                  git remote.
                name: sslVerify
                type: string
              - default: ca-bundle.crt
                description: >-
                  file name of mounted crt using ssl-ca-directory workspace.
                  default value is ca-bundle.crt.
                name: crtFileName
                type: string
              - default: ''
                description: >-
                  Subdirectory inside the `output` Workspace to clone the repo
                  into.
                name: subdirectory
                type: string
              - default: ''
                description: >-
                  Define the directory patterns to match or exclude when
                  performing a sparse checkout.
                name: sparseCheckoutDirectories
                type: string
              - default: 'true'
                description: >-
                  Clean out the contents of the destination directory if it
                  already exists before cloning.
                name: deleteExisting
                type: string
              - default: ''
                description: HTTP proxy server for non-SSL requests.
                name: httpProxy
                type: string
              - default: ''
                description: HTTPS proxy server for SSL requests.
                name: httpsProxy
                type: string
              - default: ''
                description: Opt out of proxying HTTP/HTTPS requests.
                name: noProxy
                type: string
              - default: 'true'
                description: >-
                  Log the commands that are executed during `git-clone`'s
                  operation.
                name: verbose
                type: string
              - default: >-
                  registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
                description: The image providing the git-init binary that this Task runs.
                name: gitInitImage
                type: string
              - default: /tekton/home
                description: |
                  Absolute path to the user's home directory.
                name: userHome
                type: string
            results:
              - description: The precise commit SHA that was fetched by this Task.
                name: commit
                type: string
              - description: The precise URL that was fetched by this Task.
                name: url
                type: string
            steps:
              - env:
                  - name: HOME
                    value: /tekton/home
                  - name: PARAM_URL
                    value: >-
                      https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git
                  - name: PARAM_REVISION
                    value: main
                  - name: PARAM_REFSPEC
                  - name: PARAM_SUBMODULES
                    value: 'true'
                  - name: PARAM_DEPTH
                    value: '1'
                  - name: PARAM_SSL_VERIFY
                    value: 'true'
                  - name: PARAM_CRT_FILENAME
                    value: ca-bundle.crt
                  - name: PARAM_SUBDIRECTORY
                  - name: PARAM_DELETE_EXISTING
                    value: 'true'
                  - name: PARAM_HTTP_PROXY
                  - name: PARAM_HTTPS_PROXY
                  - name: PARAM_NO_PROXY
                  - name: PARAM_VERBOSE
                    value: 'true'
                  - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  - name: PARAM_USER_HOME
                    value: /tekton/home
                  - name: WORKSPACE_OUTPUT_PATH
                    value: /workspace/output
                  - name: WORKSPACE_SSH_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_SSH_DIRECTORY_PATH
                  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                image: >-
                  registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
                name: clone
                resources: {}
                script: >
                  #!/usr/bin/env sh

                  set -eu


                  if [ "${PARAM_VERBOSE}" = "true" ] ; then
                    set -x
                  fi



                  if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ;
                  then
                    cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                    cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                    chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                    chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                  fi


                  if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                    cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                    chmod 700 "${PARAM_USER_HOME}"/.ssh
                    chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                  fi


                  if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                     export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                     if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                        export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                     fi
                  fi

                  CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


                  cleandir() {
                    # Delete any existing contents of the repo directory if it exists.
                    #
                    # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                    # or the root of a mounted volume.
                    if [ -d "${CHECKOUT_DIR}" ] ; then
                      # Delete non-hidden files and directories
                      rm -rf "${CHECKOUT_DIR:?}"/*
                      # Delete files and directories starting with . but excluding ..
                      rm -rf "${CHECKOUT_DIR}"/.[!.]*
                      # Delete files and directories starting with .. plus any other character
                      rm -rf "${CHECKOUT_DIR}"/..?*
                    fi
                  }


                  if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                    cleandir
                  fi


                  test -z "${PARAM_HTTP_PROXY}" || export
                  HTTP_PROXY="${PARAM_HTTP_PROXY}"

                  test -z "${PARAM_HTTPS_PROXY}" || export
                  HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

                  test -z "${PARAM_NO_PROXY}" || export
                  NO_PROXY="${PARAM_NO_PROXY}"


                  /ko-app/git-init \
                    -url="${PARAM_URL}" \
                    -revision="${PARAM_REVISION}" \
                    -refspec="${PARAM_REFSPEC}" \
                    -path="${CHECKOUT_DIR}" \
                    -sslVerify="${PARAM_SSL_VERIFY}" \
                    -submodules="${PARAM_SUBMODULES}" \
                    -depth="${PARAM_DEPTH}" \
                    -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                  cd "${CHECKOUT_DIR}"

                  RESULT_SHA="$(git rev-parse HEAD)"

                  EXIT_CODE="$?"

                  if [ "${EXIT_CODE}" != 0 ] ; then
                    exit "${EXIT_CODE}"
                  fi

                  printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"

                  printf "%s" "${PARAM_URL}" > "/tekton/results/url"
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 65532
            workspaces:
              - description: >-
                  The git repo will be cloned onto the volume backing this
                  Workspace.
                name: output
              - description: >
                  A .ssh directory with private key, known_hosts, config, etc.
                  Copied to

                  the user's home before git commands are executed. Used to
                  authenticate

                  with the git remote when performing the clone. Binding a
                  Secret to this

                  Workspace is strongly recommended over other volume types.
                name: ssh-directory
                optional: true
              - description: >
                  A Workspace containing a .gitconfig and .git-credentials file.
                  These

                  will be copied to the user's home before any git commands are
                  run. Any

                  other files in this Workspace are ignored. It is strongly
                  recommended

                  to use ssh-directory over basic-auth whenever possible and to
                  bind a

                  Secret to this Workspace over other volume types.
                name: basic-auth
                optional: true
              - description: >
                  A workspace containing CA certificates, this will be used by
                  Git to

                  verify the peer with when fetching or pushing over HTTPS.
                name: ssl-ca-directory
                optional: true
          duration: 21s
          reason: Succeeded
      - name: scan-source
        params:
          - name: sonarqubeHostUrl
            value: >-
              https://sonarqube-sonarqube.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
          - name: sonarqubeProjectKey
            value: globex-ui
          - name: sonarqubeProjectSecret
            value: globex-ui-sonarqube-secret
        runAfter:
          - fetch-source
        taskRef:
          kind: Task
          name: scan-code
        workspaces:
          - name: repository
            workspace: shared-data
        status:
          completionTime: '2023-10-18T09:07:47Z'
          conditions:
            - lastTransitionTime: '2023-10-18T09:07:47Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: app-globex-ui-pipeline-tj956-scan-source-pod
          startTime: '2023-10-18T09:07:27Z'
          steps:
            - container: step-scan-code
              imageID: >-
                docker.io/sonarsource/sonar-scanner-cli@sha256:f3d97bc61071007e83ae1253134606ff43b0902683da526a619e19999446882a
              name: scan-code
              terminated:
                containerID: >-
                  cri-o://8ddb5771bb62c7100227c6115dd838e67423864eb583eb029893b922859ebbe1
                exitCode: 0
                finishedAt: '2023-10-18T09:07:46Z'
                reason: Completed
                startedAt: '2023-10-18T09:07:37Z'
          taskSpec:
            params:
              - default: 'docker.io/sonarsource/sonar-scanner-cli:4.7'
                name: scanImage
                type: string
              - default: >-
                  https://sonarqube-sonarqube.apps.cluster-tpn6s.sandbox2653.opentlc.com/
                name: sonarqubeHostUrl
                type: string
              - default: object-detection-rest
                name: sonarqubeProjectKey
                type: string
              - default: object-detection-rest-sonarqube-secret
                name: sonarqubeProjectSecret
                type: string
              - default: 'true'
                name: verbose
                type: string
            steps:
              - env:
                  - name: SONAR_TOKEN_WEB_UI
                    valueFrom:
                      secretKeyRef:
                        key: token
                        name: globex-ui-sonarqube-secret
                image: 'docker.io/sonarsource/sonar-scanner-cli:4.7'
                name: scan-code
                resources: {}
                script: >
                  set -x

                  echo $(ls -a)

                  sonar-scanner -X -Dsonar.projectKey=globex-ui
                  -Dsonar.sources=./
                  -Dsonar.host.url=https://sonarqube-sonarqube.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
                  -Dsonar.login=$SONAR_TOKEN_WEB_UI
                workingDir: /workspace/repository
            workspaces:
              - name: repository
          duration: 20s
          reason: Succeeded
      - name: verify-source
        runAfter:
          - fetch-source
        taskRef:
          kind: Task
          name: verify-source-code
        workspaces:
          - name: repository
            workspace: shared-data
          - name: secrets
            workspace: secrets
        status:
          completionTime: '2023-10-18T09:07:39Z'
          conditions:
            - lastTransitionTime: '2023-10-18T09:07:39Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: app-globex-ui-pipeline-tj956-verify-source-pod
          startTime: '2023-10-18T09:07:27Z'
          steps:
            - container: step-git-verify
              imageID: >-
                docker.io/alpine/git@sha256:354bafb85446547f1312a692debe66053d476fa0f7b65658d9efda235a051faf
              name: git-verify
              terminated:
                containerID: >-
                  cri-o://20c8c2499e52afadff742d2a58c024bb7e00c454fb545dbc387cda22ecf3449a
                exitCode: 0
                finishedAt: '2023-10-18T09:07:38Z'
                reason: Completed
                startedAt: '2023-10-18T09:07:37Z'
          taskSpec:
            description: >-
              This task verifies the latest commit and signature against the gpg
              public key
            steps:
              - image: 'alpine/git:latest'
                name: git-verify
                resources: {}
                script: >
                  set -x

                  apk add gpg-agent

                  gpg --import /workspace/secrets/public.key

                  git config --global --add safe.directory /workspace/repository

                  git verify-commit HEAD || (echo "Unable to verify commit at
                  HEAD!" && exit 1)
                workingDir: /workspace/repository
            workspaces:
              - name: repository
              - name: secrets
          duration: 12s
          reason: Succeeded
      - name: build-sign-image
        params:
          - name: TLSVERIFY
            value: 'true'
          - name: BUILD_EXTRA_ARGS
            value: >-
              --label=io.openshift.build.commit.author='dev-user'
              --label=io.openshift.build.commit.date='2023-10-18T09:06:53Z'
              --label=io.openshift.build.commit.id='8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07'
              --label=io.openshift.build.commit.message='test

              ' --label=io.openshift.build.commit.ref='main'
              --ulimit=nofile=4096:4096
          - name: IMAGE
            value: >-
              my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
        retries: 1
        runAfter:
          - scan-source
          - verify-source
        taskRef:
          kind: ClusterTask
          name: buildah
        workspaces:
          - name: source
            workspace: shared-data
        status:
          completionTime: '2023-10-18T09:12:53Z'
          conditions:
            - lastTransitionTime: '2023-10-18T09:12:53Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: app-globex-ui-pipeline-tj956-build-sign-image-pod-retry1
          retriesStatus:
            - completionTime: '2023-10-18T09:10:14Z'
              conditions:
                - lastTransitionTime: '2023-10-18T09:10:14Z'
                  message: >
                    "step-build-and-push" exited with code 125 (image:
                    "registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d");
                    for logs run: kubectl -n ci logs
                    app-globex-ui-pipeline-tj956-build-sign-image-pod -c
                    step-build-and-push
                  reason: Failed
                  status: 'False'
                  type: Succeeded
              podName: app-globex-ui-pipeline-tj956-build-sign-image-pod
              startTime: '2023-10-18T09:07:47Z'
              steps:
                - container: step-build-and-push
                  imageID: >-
                    registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d
                  name: build-and-push
                  terminated:
                    containerID: >-
                      cri-o://f493c23bf420fe183757623a8251572cae250b2baf568fa695f63fc9fe1a172f
                    exitCode: 125
                    finishedAt: '2023-10-18T09:10:13Z'
                    reason: Error
                    startedAt: '2023-10-18T09:07:53Z'
              taskSpec:
                description: >-
                  Buildah task builds source into a container image and then
                  pushes it to a container registry.

                  Buildah Task builds source into a container image using
                  Project Atomic's Buildah build tool.It uses Buildah's support
                  for building from Dockerfiles, using its buildah bud
                  command.This command executes the directives in the Dockerfile
                  to assemble a container image, then pushes that image to a
                  container registry.
                params:
                  - description: Reference of the image buildah will produce.
                    name: IMAGE
                    type: string
                  - default: >-
                      registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                    description: The location of the buildah builder image.
                    name: BUILDER_IMAGE
                    type: string
                  - default: vfs
                    description: Set buildah storage driver
                    name: STORAGE_DRIVER
                    type: string
                  - default: ./Dockerfile
                    description: Path to the Dockerfile to build.
                    name: DOCKERFILE
                    type: string
                  - default: .
                    description: Path to the directory to use as context.
                    name: CONTEXT
                    type: string
                  - default: 'true'
                    description: >-
                      Verify the TLS on the registry endpoint (for push/pull to
                      a non-TLS registry)
                    name: TLSVERIFY
                    type: string
                  - default: oci
                    description: 'The format of the built container, oci or docker'
                    name: FORMAT
                    type: string
                  - default: ''
                    description: >-
                      Extra parameters passed for the build command when
                      building images.
                    name: BUILD_EXTRA_ARGS
                    type: string
                  - default: ''
                    description: >-
                      Extra parameters passed for the push command when pushing
                      images.
                    name: PUSH_EXTRA_ARGS
                    type: string
                  - default: 'false'
                    description: Skip pushing the built image
                    name: SKIP_PUSH
                    type: string
                results:
                  - description: Digest of the image just built.
                    name: IMAGE_DIGEST
                    type: string
                  - description: Image repository where the built image would be pushed to
                    name: IMAGE_URL
                    type: string
                steps:
                  - image: >-
                      registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                    name: build-and-push
                    resources: {}
                    script: >
                      buildah --storage-driver=vfs bud \
                        --label=io.openshift.build.commit.author='dev-user' --label=io.openshift.build.commit.date='2023-10-18T09:06:53Z' --label=io.openshift.build.commit.id='8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07' --label=io.openshift.build.commit.message='test
                      ' --label=io.openshift.build.commit.ref='main'
                      --ulimit=nofile=4096:4096 --format=oci \
                        --tls-verify=true --no-cache \
                        -f ./Dockerfile -t my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 .

                      [[ "false" == "true" ]] && echo "Push skipped" && exit 0


                      if [[ "false" == "true" ]]; then

                        # if config.json exists at workspace root, we use that
                        if test -f "/config.json"; then
                          export DOCKER_CONFIG=""

                        # else we look for .dockerconfigjson at the root
                        elif test -f "/.dockerconfigjson"; then
                          cp "/.dockerconfigjson" "$HOME/.docker/config.json"
                          export DOCKER_CONFIG="$HOME/.docker"

                        # need to error out if neither files are present
                        else
                          echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
                          exit 1
                        fi
                      fi


                      buildah --storage-driver=vfs push \
                         --tls-verify=true \
                        --digestfile /tmp/image-digest my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 \
                        docker://my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
                      cat /tmp/image-digest | tee /tekton/results/IMAGE_DIGEST

                      echo
                      "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
                      | tee /tekton/results/IMAGE_URL
                    securityContext:
                      capabilities:
                        add:
                          - SETFCAP
                    volumeMounts:
                      - mountPath: /var/lib/containers
                        name: varlibcontainers
                    workingDir: /workspace/source
                volumes:
                  - emptyDir: {}
                    name: varlibcontainers
                workspaces:
                  - name: source
                  - description: >-
                      An optional workspace that allows providing a
                      .docker/config.json file for Buildah to access the
                      container registry. The file should be placed at the root
                      of the Workspace with name config.json or
                      .dockerconfigjson.
                    name: dockerconfig
                    optional: true
          startTime: '2023-10-18T09:10:14Z'
          steps:
            - container: step-build-and-push
              imageID: >-
                registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d
              name: build-and-push
              terminated:
                containerID: >-
                  cri-o://5aadab7a1cdf5f2a73841fb4127de5fd4c75f6de6be0d45080de17a88de9c5f0
                exitCode: 0
                finishedAt: '2023-10-18T09:12:52Z'
                message: >-
                  [{"key":"IMAGE_DIGEST","value":"sha256:9e38a45165f96c97098196af5c664882be529284976f66d66019a9e499f56ffb","type":1},{"key":"IMAGE_URL","value":"my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07\n","type":1}]
                reason: Completed
                startedAt: '2023-10-18T09:10:22Z'
          taskResults:
            - name: IMAGE_DIGEST
              type: string
              value: >-
                sha256:9e38a45165f96c97098196af5c664882be529284976f66d66019a9e499f56ffb
            - name: IMAGE_URL
              type: string
              value: >
                my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
          taskSpec:
            description: >-
              Buildah task builds source into a container image and then pushes
              it to a container registry.

              Buildah Task builds source into a container image using Project
              Atomic's Buildah build tool.It uses Buildah's support for building
              from Dockerfiles, using its buildah bud command.This command
              executes the directives in the Dockerfile to assemble a container
              image, then pushes that image to a container registry.
            params:
              - description: Reference of the image buildah will produce.
                name: IMAGE
                type: string
              - default: >-
                  registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                description: The location of the buildah builder image.
                name: BUILDER_IMAGE
                type: string
              - default: vfs
                description: Set buildah storage driver
                name: STORAGE_DRIVER
                type: string
              - default: ./Dockerfile
                description: Path to the Dockerfile to build.
                name: DOCKERFILE
                type: string
              - default: .
                description: Path to the directory to use as context.
                name: CONTEXT
                type: string
              - default: 'true'
                description: >-
                  Verify the TLS on the registry endpoint (for push/pull to a
                  non-TLS registry)
                name: TLSVERIFY
                type: string
              - default: oci
                description: 'The format of the built container, oci or docker'
                name: FORMAT
                type: string
              - default: ''
                description: >-
                  Extra parameters passed for the build command when building
                  images.
                name: BUILD_EXTRA_ARGS
                type: string
              - default: ''
                description: >-
                  Extra parameters passed for the push command when pushing
                  images.
                name: PUSH_EXTRA_ARGS
                type: string
              - default: 'false'
                description: Skip pushing the built image
                name: SKIP_PUSH
                type: string
            results:
              - description: Digest of the image just built.
                name: IMAGE_DIGEST
                type: string
              - description: Image repository where the built image would be pushed to
                name: IMAGE_URL
                type: string
            steps:
              - image: >-
                  registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                name: build-and-push
                resources: {}
                script: >
                  buildah --storage-driver=vfs bud \
                    --label=io.openshift.build.commit.author='dev-user' --label=io.openshift.build.commit.date='2023-10-18T09:06:53Z' --label=io.openshift.build.commit.id='8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07' --label=io.openshift.build.commit.message='test
                  ' --label=io.openshift.build.commit.ref='main'
                  --ulimit=nofile=4096:4096 --format=oci \
                    --tls-verify=true --no-cache \
                    -f ./Dockerfile -t my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 .

                  [[ "false" == "true" ]] && echo "Push skipped" && exit 0


                  if [[ "false" == "true" ]]; then

                    # if config.json exists at workspace root, we use that
                    if test -f "/config.json"; then
                      export DOCKER_CONFIG=""

                    # else we look for .dockerconfigjson at the root
                    elif test -f "/.dockerconfigjson"; then
                      cp "/.dockerconfigjson" "$HOME/.docker/config.json"
                      export DOCKER_CONFIG="$HOME/.docker"

                    # need to error out if neither files are present
                    else
                      echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
                      exit 1
                    fi
                  fi


                  buildah --storage-driver=vfs push \
                     --tls-verify=true \
                    --digestfile /tmp/image-digest my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 \
                    docker://my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
                  cat /tmp/image-digest | tee /tekton/results/IMAGE_DIGEST

                  echo
                  "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
                  | tee /tekton/results/IMAGE_URL
                securityContext:
                  capabilities:
                    add:
                      - SETFCAP
                volumeMounts:
                  - mountPath: /var/lib/containers
                    name: varlibcontainers
                workingDir: /workspace/source
            volumes:
              - emptyDir: {}
                name: varlibcontainers
            workspaces:
              - name: source
              - description: >-
                  An optional workspace that allows providing a
                  .docker/config.json file for Buildah to access the container
                  registry. The file should be placed at the root of the
                  Workspace with name config.json or .dockerconfigjson.
                name: dockerconfig
                optional: true
          duration: 2m 39s
          reason: Succeeded
      - name: acs-image-check
        params:
          - name: rox_central_endpoint
            value: stackrox-endpoint
          - name: rox_api_token
            value: stackrox-secret
          - name: image
            value: >-
              my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
          - name: insecure-skip-tls-verify
            value: 'true'
        runAfter:
          - build-sign-image
        taskRef:
          kind: Task
          name: acs-image-check
        status:
          completionTime: '2023-10-18T09:13:12Z'
          conditions:
            - lastTransitionTime: '2023-10-18T09:13:12Z'
              message: >
                "step-rox-image-check" exited with code 1 (image:
                "registry.access.redhat.com/ubi8/ubi-minimal@sha256:8e68a739db66e514ce9ccfac7421e83d03180045e0a16ccf949cdac884150e5f");
                for logs run: kubectl -n ci logs
                app-globex-ui-pipeline-tj956-acs-image-check-pod -c
                step-rox-image-check
              reason: Failed
              status: 'False'
              type: Succeeded
          podName: app-globex-ui-pipeline-tj956-acs-image-check-pod
          startTime: '2023-10-18T09:12:53Z'
          steps:
            - container: step-rox-image-check
              imageID: >-
                registry.access.redhat.com/ubi8/ubi-minimal@sha256:8e68a739db66e514ce9ccfac7421e83d03180045e0a16ccf949cdac884150e5f
              name: rox-image-check
              terminated:
                containerID: >-
                  cri-o://4130b6bf134223080eb9fa43bbac84627e07d6d2d08e8e33fec500817f26f8ce
                exitCode: 1
                finishedAt: '2023-10-18T09:13:11Z'
                reason: Error
                startedAt: '2023-10-18T09:12:58Z'
          taskSpec:
            description: >-
              Policy check an image with StackRox/RHACS This tasks allows you to
              check an image against build-time policies and apply enforcement
              to fail builds. It's a companion to the stackrox-image-scan task,
              which returns full vulnerability scan results for an image.
            params:
              - description: |
                  Secret containing the address:port tuple for StackRox Central)
                  (example - rox.stackrox.io:443)
                name: rox_central_endpoint
                type: string
              - description: Secret containing the StackRox API token with CI permissions
                name: rox_api_token
                type: string
              - description: >
                  Full name of image to scan (example --
                  gcr.io/rox/sample:5.0-rc1)
                name: image
                type: string
              - default: 'false'
                description: >
                  When set to `"true"`, skip verifying the TLS certs of the
                  Central

                  endpoint.  Defaults to `"false"`.
                name: insecure-skip-tls-verify
                type: string
            results:
              - description: Output of `roxctl image check`
                name: check_output
                type: string
            steps:
              - env:
                  - name: ROX_API_TOKEN
                    valueFrom:
                      secretKeyRef:
                        key: rox_api_token
                        name: stackrox-secret
                  - name: ROX_CENTRAL_ENDPOINT
                    valueFrom:
                      secretKeyRef:
                        key: rox_central_endpoint
                        name: stackrox-endpoint
                image: registry.access.redhat.com/ubi8/ubi-minimal
                name: rox-image-check
                resources: {}
                script: |
                  #!/usr/bin/env bash
                  set +x
                  curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
                    "https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux" \
                    --output ./roxctl  \
                    > /dev/null
                  chmod +x ./roxctl  > /dev/null
                  ./roxctl image check \
                    $( [ "true" = "true" ] && \
                    echo -n "--insecure-skip-tls-verify") \
                    -e "$ROX_CENTRAL_ENDPOINT" --image "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
          duration: 19s
          reason: Failed
      - name: acs-image-scan
        params:
          - name: rox_central_endpoint
            value: stackrox-endpoint
          - name: rox_api_token
            value: stackrox-secret
          - name: image
            value: >-
              my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
          - name: insecure-skip-tls-verify
            value: 'true'
        runAfter:
          - build-sign-image
        taskRef:
          kind: Task
          name: acs-image-scan
        status:
          completionTime: '2023-10-18T09:13:12Z'
          conditions:
            - lastTransitionTime: '2023-10-18T09:13:12Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: app-globex-ui-pipeline-tj956-acs-image-scan-pod
          startTime: '2023-10-18T09:12:53Z'
          steps:
            - container: step-rox-image-scan
              imageID: >-
                registry.access.redhat.com/ubi8/ubi-minimal@sha256:8e68a739db66e514ce9ccfac7421e83d03180045e0a16ccf949cdac884150e5f
              name: rox-image-scan
              terminated:
                containerID: >-
                  cri-o://f2cd2ca004bd06b7392cf5fcbded14a1c00ae40e46f93bb01373b459231df1ce
                exitCode: 0
                finishedAt: '2023-10-18T09:13:11Z'
                reason: Completed
                startedAt: '2023-10-18T09:12:59Z'
          taskSpec:
            description: >-
              Policy check an image with StackRox/RHACS This tasks allows you to
              check an image against build-time policies and apply enforcement
              to fail builds. It's a companion to the stackrox-image-scan task,
              which returns full vulnerability scan results for an image.
            params:
              - description: |
                  Secret containing the address:port tuple for StackRox Central)
                  (example - rox.stackrox.io:443)
                name: rox_central_endpoint
                type: string
              - description: Secret containing the StackRox API token with CI permissions
                name: rox_api_token
                type: string
              - description: >
                  Full name of image to scan (example --
                  gcr.io/rox/sample:5.0-rc1)
                name: image
                type: string
              - default: 'false'
                description: >
                  When set to `"true"`, skip verifying the TLS certs of the
                  Central

                  endpoint.  Defaults to `"false"`.
                name: insecure-skip-tls-verify
                type: string
            results:
              - description: Output of `roxctl image check`
                name: check_output
                type: string
            steps:
              - env:
                  - name: ROX_API_TOKEN
                    valueFrom:
                      secretKeyRef:
                        key: rox_api_token
                        name: stackrox-secret
                  - name: ROX_CENTRAL_ENDPOINT
                    valueFrom:
                      secretKeyRef:
                        key: rox_central_endpoint
                        name: stackrox-endpoint
                image: registry.access.redhat.com/ubi8/ubi-minimal
                name: rox-image-scan
                resources: {}
                script: |
                  #!/usr/bin/env bash
                  set +x
                  curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
                    "https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux" \
                    --output ./roxctl  \
                    > /dev/null
                  chmod +x ./roxctl  > /dev/null
                  ./roxctl image scan \
                    $( [ "true" = "true" ] && \
                    echo -n "--insecure-skip-tls-verify") \
                    -e "$ROX_CENTRAL_ENDPOINT" --image "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
          duration: 19s
          reason: Succeeded
      - name: generate-sbom
        params:
          - name: cyclonedxHostUrl
            value: >-
              https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
        runAfter:
          - build-sign-image
        taskRef:
          kind: Task
          name: generate-sbom
        workspaces:
          - name: repository
            workspace: shared-data
        status:
          completionTime: '2023-10-18T09:13:09Z'
          conditions:
            - lastTransitionTime: '2023-10-18T09:13:09Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: app-globex-ui-pipeline-tj956-generate-sbom-pod
          startTime: '2023-10-18T09:12:53Z'
          steps:
            - container: step-create-sbom
              imageID: >-
                quay.io/redhat-gpte/syft@sha256:4d67a1419dc0e4802b48c68757901747ecce5a99b7c2a99f934ab590c305af3e
              name: create-sbom
              terminated:
                containerID: >-
                  cri-o://bc36c255341c166bfce13d669aee19c803a8219bd875c0c0610cbd30375f873f
                exitCode: 0
                finishedAt: '2023-10-18T09:13:02Z'
                message: >-
                  [{"key":"sbomUrl","value":"https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A39feb13d-82a5-4ac9-83a3-a3b548f8e1ab\u0026version=1\r","type":1}]
                reason: Completed
                startedAt: '2023-10-18T09:13:00Z'
            - container: step-scan-sbom
              imageID: >-
                quay.io/redhat-gpte/grype@sha256:dc802d5eee387fb7b553d2f6a7c17ebdbeddc645ca88d4cb5c4920c809493a98
              name: scan-sbom
              terminated:
                containerID: >-
                  cri-o://38921536719d97f2e6b493b119a53dd5f3581c99d7add530c52f1e0010217570
                exitCode: 0
                finishedAt: '2023-10-18T09:13:09Z'
                message: >-
                  [{"key":"sbomUrl","value":"https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A39feb13d-82a5-4ac9-83a3-a3b548f8e1ab\u0026version=1\r","type":1}]
                reason: Completed
                startedAt: '2023-10-18T09:13:02Z'
          taskResults:
            - name: sbomUrl
              type: string
              value: "https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A39feb13d-82a5-4ac9-83a3-a3b548f8e1ab&version=1\r"
          taskSpec:
            params:
              - default: >-
                  https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-tr47n.tr47n.sandbox987.opentlc.com/
                name: cyclonedxHostUrl
                type: string
            results:
              - description: The url location of the generate SBOM
                name: sbomUrl
                type: string
            steps:
              - image: 'quay.io/redhat-gpte/syft:0.88.0'
                name: create-sbom
                resources:
                  requests:
                    memory: 1Gi
                script: >
                  syft . --output cyclonedx-xml --source-name globex-ui >
                  ./bom.xml

                  curl -X POST
                  https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom
                  -H "Content-Type: application/vnd.cyclonedx+xml; version=1.4"
                  -H "Accept: */*" -d @bom.xml -D /tmp/header.txt

                  LOCATION=$(cat /tmp/header.txt | grep location: | awk '{print
                  $2}' | sed 's|http:|https:|g')

                  printf "%s" "$LOCATION" > "/tekton/results/sbomUrl"

                  echo "SBOM URL accessible on Results of TaskRun
                  app-globex-ui-pipeline-tj956-generate-sbom"
                workingDir: /workspace/repository
              - image: 'quay.io/redhat-gpte/grype:0.65.2'
                name: scan-sbom
                resources:
                  requests:
                    memory: 1Gi
                script: |
                  set -x
                  grype sbom:./bom.xml -o table
                workingDir: /workspace/repository
            workspaces:
              - name: repository
          duration: 16s
          reason: Succeeded
      - name: update-dev-manifest
        params:
          - name: image
            value: >-
              my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
          - name: configuration_file
            value: gitops/application/globex/overlays/dev/kustomization.yaml
          - name: repository
            value: >-
              https://dev-user:openshift@gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/securing-software-supply-chain
          - name: git_user_name
            value: dev-user
        runAfter:
          - acs-image-check
          - acs-image-scan
          - generate-sbom
        taskRef:
          kind: Task
          name: update-manifest
        status:
          reason: Skipped
      - name: acs-deploy-check
        params:
          - name: rox_central_endpoint
            value: stackrox-endpoint
          - name: rox_api_token
            value: stackrox-secret
          - name: gitRepositoryUrl
            value: >-
              https://dev-user:openshift@gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/securing-software-supply-chain
          - name: gitRepositoryRevision
            value: main
          - name: insecure-skip-tls-verify
            value: 'true'
        runAfter:
          - update-dev-manifest
        taskRef:
          kind: Task
          name: acs-deploy-check
        status:
          reason: Skipped
      - name: verify-tlog-signature
        params:
          - name: registrySecret
            value: image-registry-secret
          - name: cosignSecret
            value: cosign-secret
          - name: image
            value: >-
              my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
        runAfter:
          - update-dev-manifest
        taskRef:
          kind: Task
          name: rekor-verify
        status:
          reason: Skipped
      - name: create-prod-manifest-branch
        params:
          - name: image
            value: >-
              my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
          - name: configuration_file
            value: gitops/application/globex/overlays/prod/kustomization.yaml
          - name: repository
            value: >-
              https://dev-user:openshift@gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/securing-software-supply-chain
          - name: git_user_name
            value: dev-user
          - name: target-branch
            value: feature-for-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
        runAfter:
          - acs-deploy-check
          - verify-tlog-signature
        taskRef:
          kind: Task
          name: pr-manifest
        status:
          reason: Skipped
      - name: issue-prod-pull-request
        params:
          - name: GITHUB_HOST_URL
            value: gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
          - name: API_PATH_PREFIX
            value: /api/v1
          - name: GITHUB_TOKEN_SECRET_NAME
            value: gitea-token
          - name: REPO_FULL_NAME
            value: dev-user/securing-software-supply-chain
          - name: HEAD
            value: feature-for-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
          - name: BASE
            value: main
          - name: BODY
            value: |
              Update prod image for test
          - name: TITLE
            value: |
              Production update: test
        runAfter:
          - create-prod-manifest-branch
        taskRef:
          kind: Task
          name: gitea-open-pull-request
        status:
          reason: Skipped
    workspaces:
      - name: shared-data
      - name: maven-settings
      - name: signature
      - name: secrets
  skippedTasks:
    - name: update-dev-manifest
      reason: PipelineRun was stopping
    - name: acs-deploy-check
      reason: PipelineRun was stopping
    - name: verify-tlog-signature
      reason: PipelineRun was stopping
    - name: create-prod-manifest-branch
      reason: PipelineRun was stopping
    - name: issue-prod-pull-request
      reason: PipelineRun was stopping
  startTime: '2023-10-18T09:07:05Z'
  taskRuns:
    app-globex-ui-pipeline-tj956-acs-image-check:
      pipelineTaskName: acs-image-check
      status:
        completionTime: '2023-10-18T09:13:12Z'
        conditions:
          - lastTransitionTime: '2023-10-18T09:13:12Z'
            message: >
              "step-rox-image-check" exited with code 1 (image:
              "registry.access.redhat.com/ubi8/ubi-minimal@sha256:8e68a739db66e514ce9ccfac7421e83d03180045e0a16ccf949cdac884150e5f");
              for logs run: kubectl -n ci logs
              app-globex-ui-pipeline-tj956-acs-image-check-pod -c
              step-rox-image-check
            reason: Failed
            status: 'False'
            type: Succeeded
        podName: app-globex-ui-pipeline-tj956-acs-image-check-pod
        startTime: '2023-10-18T09:12:53Z'
        steps:
          - container: step-rox-image-check
            imageID: >-
              registry.access.redhat.com/ubi8/ubi-minimal@sha256:8e68a739db66e514ce9ccfac7421e83d03180045e0a16ccf949cdac884150e5f
            name: rox-image-check
            terminated:
              containerID: >-
                cri-o://4130b6bf134223080eb9fa43bbac84627e07d6d2d08e8e33fec500817f26f8ce
              exitCode: 1
              finishedAt: '2023-10-18T09:13:11Z'
              reason: Error
              startedAt: '2023-10-18T09:12:58Z'
        taskSpec:
          description: >-
            Policy check an image with StackRox/RHACS This tasks allows you to
            check an image against build-time policies and apply enforcement to
            fail builds. It's a companion to the stackrox-image-scan task, which
            returns full vulnerability scan results for an image.
          params:
            - description: |
                Secret containing the address:port tuple for StackRox Central)
                (example - rox.stackrox.io:443)
              name: rox_central_endpoint
              type: string
            - description: Secret containing the StackRox API token with CI permissions
              name: rox_api_token
              type: string
            - description: >
                Full name of image to scan (example --
                gcr.io/rox/sample:5.0-rc1)
              name: image
              type: string
            - default: 'false'
              description: >
                When set to `"true"`, skip verifying the TLS certs of the
                Central

                endpoint.  Defaults to `"false"`.
              name: insecure-skip-tls-verify
              type: string
          results:
            - description: Output of `roxctl image check`
              name: check_output
              type: string
          steps:
            - env:
                - name: ROX_API_TOKEN
                  valueFrom:
                    secretKeyRef:
                      key: rox_api_token
                      name: stackrox-secret
                - name: ROX_CENTRAL_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      key: rox_central_endpoint
                      name: stackrox-endpoint
              image: registry.access.redhat.com/ubi8/ubi-minimal
              name: rox-image-check
              resources: {}
              script: |
                #!/usr/bin/env bash
                set +x
                curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
                  "https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux" \
                  --output ./roxctl  \
                  > /dev/null
                chmod +x ./roxctl  > /dev/null
                ./roxctl image check \
                  $( [ "true" = "true" ] && \
                  echo -n "--insecure-skip-tls-verify") \
                  -e "$ROX_CENTRAL_ENDPOINT" --image "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
    app-globex-ui-pipeline-tj956-acs-image-scan:
      pipelineTaskName: acs-image-scan
      status:
        completionTime: '2023-10-18T09:13:12Z'
        conditions:
          - lastTransitionTime: '2023-10-18T09:13:12Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: app-globex-ui-pipeline-tj956-acs-image-scan-pod
        startTime: '2023-10-18T09:12:53Z'
        steps:
          - container: step-rox-image-scan
            imageID: >-
              registry.access.redhat.com/ubi8/ubi-minimal@sha256:8e68a739db66e514ce9ccfac7421e83d03180045e0a16ccf949cdac884150e5f
            name: rox-image-scan
            terminated:
              containerID: >-
                cri-o://f2cd2ca004bd06b7392cf5fcbded14a1c00ae40e46f93bb01373b459231df1ce
              exitCode: 0
              finishedAt: '2023-10-18T09:13:11Z'
              reason: Completed
              startedAt: '2023-10-18T09:12:59Z'
        taskSpec:
          description: >-
            Policy check an image with StackRox/RHACS This tasks allows you to
            check an image against build-time policies and apply enforcement to
            fail builds. It's a companion to the stackrox-image-scan task, which
            returns full vulnerability scan results for an image.
          params:
            - description: |
                Secret containing the address:port tuple for StackRox Central)
                (example - rox.stackrox.io:443)
              name: rox_central_endpoint
              type: string
            - description: Secret containing the StackRox API token with CI permissions
              name: rox_api_token
              type: string
            - description: >
                Full name of image to scan (example --
                gcr.io/rox/sample:5.0-rc1)
              name: image
              type: string
            - default: 'false'
              description: >
                When set to `"true"`, skip verifying the TLS certs of the
                Central

                endpoint.  Defaults to `"false"`.
              name: insecure-skip-tls-verify
              type: string
          results:
            - description: Output of `roxctl image check`
              name: check_output
              type: string
          steps:
            - env:
                - name: ROX_API_TOKEN
                  valueFrom:
                    secretKeyRef:
                      key: rox_api_token
                      name: stackrox-secret
                - name: ROX_CENTRAL_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      key: rox_central_endpoint
                      name: stackrox-endpoint
              image: registry.access.redhat.com/ubi8/ubi-minimal
              name: rox-image-scan
              resources: {}
              script: |
                #!/usr/bin/env bash
                set +x
                curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
                  "https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux" \
                  --output ./roxctl  \
                  > /dev/null
                chmod +x ./roxctl  > /dev/null
                ./roxctl image scan \
                  $( [ "true" = "true" ] && \
                  echo -n "--insecure-skip-tls-verify") \
                  -e "$ROX_CENTRAL_ENDPOINT" --image "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
    app-globex-ui-pipeline-tj956-build-sign-image:
      pipelineTaskName: build-sign-image
      status:
        completionTime: '2023-10-18T09:12:53Z'
        conditions:
          - lastTransitionTime: '2023-10-18T09:12:53Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: app-globex-ui-pipeline-tj956-build-sign-image-pod-retry1
        retriesStatus:
          - completionTime: '2023-10-18T09:10:14Z'
            conditions:
              - lastTransitionTime: '2023-10-18T09:10:14Z'
                message: >
                  "step-build-and-push" exited with code 125 (image:
                  "registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d");
                  for logs run: kubectl -n ci logs
                  app-globex-ui-pipeline-tj956-build-sign-image-pod -c
                  step-build-and-push
                reason: Failed
                status: 'False'
                type: Succeeded
            podName: app-globex-ui-pipeline-tj956-build-sign-image-pod
            startTime: '2023-10-18T09:07:47Z'
            steps:
              - container: step-build-and-push
                imageID: >-
                  registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d
                name: build-and-push
                terminated:
                  containerID: >-
                    cri-o://f493c23bf420fe183757623a8251572cae250b2baf568fa695f63fc9fe1a172f
                  exitCode: 125
                  finishedAt: '2023-10-18T09:10:13Z'
                  reason: Error
                  startedAt: '2023-10-18T09:07:53Z'
            taskSpec:
              description: >-
                Buildah task builds source into a container image and then
                pushes it to a container registry.

                Buildah Task builds source into a container image using Project
                Atomic's Buildah build tool.It uses Buildah's support for
                building from Dockerfiles, using its buildah bud command.This
                command executes the directives in the Dockerfile to assemble a
                container image, then pushes that image to a container registry.
              params:
                - description: Reference of the image buildah will produce.
                  name: IMAGE
                  type: string
                - default: >-
                    registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                  description: The location of the buildah builder image.
                  name: BUILDER_IMAGE
                  type: string
                - default: vfs
                  description: Set buildah storage driver
                  name: STORAGE_DRIVER
                  type: string
                - default: ./Dockerfile
                  description: Path to the Dockerfile to build.
                  name: DOCKERFILE
                  type: string
                - default: .
                  description: Path to the directory to use as context.
                  name: CONTEXT
                  type: string
                - default: 'true'
                  description: >-
                    Verify the TLS on the registry endpoint (for push/pull to a
                    non-TLS registry)
                  name: TLSVERIFY
                  type: string
                - default: oci
                  description: 'The format of the built container, oci or docker'
                  name: FORMAT
                  type: string
                - default: ''
                  description: >-
                    Extra parameters passed for the build command when building
                    images.
                  name: BUILD_EXTRA_ARGS
                  type: string
                - default: ''
                  description: >-
                    Extra parameters passed for the push command when pushing
                    images.
                  name: PUSH_EXTRA_ARGS
                  type: string
                - default: 'false'
                  description: Skip pushing the built image
                  name: SKIP_PUSH
                  type: string
              results:
                - description: Digest of the image just built.
                  name: IMAGE_DIGEST
                  type: string
                - description: Image repository where the built image would be pushed to
                  name: IMAGE_URL
                  type: string
              steps:
                - image: >-
                    registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                  name: build-and-push
                  resources: {}
                  script: >
                    buildah --storage-driver=vfs bud \
                      --label=io.openshift.build.commit.author='dev-user' --label=io.openshift.build.commit.date='2023-10-18T09:06:53Z' --label=io.openshift.build.commit.id='8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07' --label=io.openshift.build.commit.message='test
                    ' --label=io.openshift.build.commit.ref='main'
                    --ulimit=nofile=4096:4096 --format=oci \
                      --tls-verify=true --no-cache \
                      -f ./Dockerfile -t my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 .

                    [[ "false" == "true" ]] && echo "Push skipped" && exit 0


                    if [[ "false" == "true" ]]; then

                      # if config.json exists at workspace root, we use that
                      if test -f "/config.json"; then
                        export DOCKER_CONFIG=""

                      # else we look for .dockerconfigjson at the root
                      elif test -f "/.dockerconfigjson"; then
                        cp "/.dockerconfigjson" "$HOME/.docker/config.json"
                        export DOCKER_CONFIG="$HOME/.docker"

                      # need to error out if neither files are present
                      else
                        echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
                        exit 1
                      fi
                    fi


                    buildah --storage-driver=vfs push \
                       --tls-verify=true \
                      --digestfile /tmp/image-digest my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 \
                      docker://my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
                    cat /tmp/image-digest | tee /tekton/results/IMAGE_DIGEST

                    echo
                    "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
                    | tee /tekton/results/IMAGE_URL
                  securityContext:
                    capabilities:
                      add:
                        - SETFCAP
                  volumeMounts:
                    - mountPath: /var/lib/containers
                      name: varlibcontainers
                  workingDir: /workspace/source
              volumes:
                - emptyDir: {}
                  name: varlibcontainers
              workspaces:
                - name: source
                - description: >-
                    An optional workspace that allows providing a
                    .docker/config.json file for Buildah to access the container
                    registry. The file should be placed at the root of the
                    Workspace with name config.json or .dockerconfigjson.
                  name: dockerconfig
                  optional: true
        startTime: '2023-10-18T09:10:14Z'
        steps:
          - container: step-build-and-push
            imageID: >-
              registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d
            name: build-and-push
            terminated:
              containerID: >-
                cri-o://5aadab7a1cdf5f2a73841fb4127de5fd4c75f6de6be0d45080de17a88de9c5f0
              exitCode: 0
              finishedAt: '2023-10-18T09:12:52Z'
              message: >-
                [{"key":"IMAGE_DIGEST","value":"sha256:9e38a45165f96c97098196af5c664882be529284976f66d66019a9e499f56ffb","type":1},{"key":"IMAGE_URL","value":"my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07\n","type":1}]
              reason: Completed
              startedAt: '2023-10-18T09:10:22Z'
        taskResults:
          - name: IMAGE_DIGEST
            type: string
            value: >-
              sha256:9e38a45165f96c97098196af5c664882be529284976f66d66019a9e499f56ffb
          - name: IMAGE_URL
            type: string
            value: >
              my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
        taskSpec:
          description: >-
            Buildah task builds source into a container image and then pushes it
            to a container registry.

            Buildah Task builds source into a container image using Project
            Atomic's Buildah build tool.It uses Buildah's support for building
            from Dockerfiles, using its buildah bud command.This command
            executes the directives in the Dockerfile to assemble a container
            image, then pushes that image to a container registry.
          params:
            - description: Reference of the image buildah will produce.
              name: IMAGE
              type: string
            - default: >-
                registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
              description: The location of the buildah builder image.
              name: BUILDER_IMAGE
              type: string
            - default: vfs
              description: Set buildah storage driver
              name: STORAGE_DRIVER
              type: string
            - default: ./Dockerfile
              description: Path to the Dockerfile to build.
              name: DOCKERFILE
              type: string
            - default: .
              description: Path to the directory to use as context.
              name: CONTEXT
              type: string
            - default: 'true'
              description: >-
                Verify the TLS on the registry endpoint (for push/pull to a
                non-TLS registry)
              name: TLSVERIFY
              type: string
            - default: oci
              description: 'The format of the built container, oci or docker'
              name: FORMAT
              type: string
            - default: ''
              description: >-
                Extra parameters passed for the build command when building
                images.
              name: BUILD_EXTRA_ARGS
              type: string
            - default: ''
              description: >-
                Extra parameters passed for the push command when pushing
                images.
              name: PUSH_EXTRA_ARGS
              type: string
            - default: 'false'
              description: Skip pushing the built image
              name: SKIP_PUSH
              type: string
          results:
            - description: Digest of the image just built.
              name: IMAGE_DIGEST
              type: string
            - description: Image repository where the built image would be pushed to
              name: IMAGE_URL
              type: string
          steps:
            - image: >-
                registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
              name: build-and-push
              resources: {}
              script: >
                buildah --storage-driver=vfs bud \
                  --label=io.openshift.build.commit.author='dev-user' --label=io.openshift.build.commit.date='2023-10-18T09:06:53Z' --label=io.openshift.build.commit.id='8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07' --label=io.openshift.build.commit.message='test
                ' --label=io.openshift.build.commit.ref='main'
                --ulimit=nofile=4096:4096 --format=oci \
                  --tls-verify=true --no-cache \
                  -f ./Dockerfile -t my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 .

                [[ "false" == "true" ]] && echo "Push skipped" && exit 0


                if [[ "false" == "true" ]]; then

                  # if config.json exists at workspace root, we use that
                  if test -f "/config.json"; then
                    export DOCKER_CONFIG=""

                  # else we look for .dockerconfigjson at the root
                  elif test -f "/.dockerconfigjson"; then
                    cp "/.dockerconfigjson" "$HOME/.docker/config.json"
                    export DOCKER_CONFIG="$HOME/.docker"

                  # need to error out if neither files are present
                  else
                    echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
                    exit 1
                  fi
                fi


                buildah --storage-driver=vfs push \
                   --tls-verify=true \
                  --digestfile /tmp/image-digest my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07 \
                  docker://my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
                cat /tmp/image-digest | tee /tekton/results/IMAGE_DIGEST

                echo
                "my-registry-quay-quay-enterprise.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/quay/globex-ui:main-8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07"
                | tee /tekton/results/IMAGE_URL
              securityContext:
                capabilities:
                  add:
                    - SETFCAP
              volumeMounts:
                - mountPath: /var/lib/containers
                  name: varlibcontainers
              workingDir: /workspace/source
          volumes:
            - emptyDir: {}
              name: varlibcontainers
          workspaces:
            - name: source
            - description: >-
                An optional workspace that allows providing a
                .docker/config.json file for Buildah to access the container
                registry. The file should be placed at the root of the Workspace
                with name config.json or .dockerconfigjson.
              name: dockerconfig
              optional: true
    app-globex-ui-pipeline-tj956-fetch-source:
      pipelineTaskName: fetch-source
      status:
        completionTime: '2023-10-18T09:07:27Z'
        conditions:
          - lastTransitionTime: '2023-10-18T09:07:27Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: app-globex-ui-pipeline-tj956-fetch-source-pod
        startTime: '2023-10-18T09:07:06Z'
        steps:
          - container: step-clone
            imageID: >-
              registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
            name: clone
            terminated:
              containerID: >-
                cri-o://bb799be6043f4dcdab16ab63e5c10f41657dfc16104547aa1007bd9bd44ba780
              exitCode: 0
              finishedAt: '2023-10-18T09:07:26Z'
              message: >-
                [{"key":"commit","value":"8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07","type":1},{"key":"url","value":"https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git","type":1}]
              reason: Completed
              startedAt: '2023-10-18T09:07:26Z'
        taskResults:
          - name: commit
            type: string
            value: 8b1e2815e3bbb70ae45015b36e2e2f01bd31fc07
          - name: url
            type: string
            value: >-
              https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git
        taskSpec:
          description: >-
            These Tasks are Git tasks to work with repositories used by other
            tasks in your Pipeline.

            The git-clone Task will clone a repo from the provided url into the
            output Workspace. By default the repo will be cloned into the root
            of your Workspace. You can clone into a subdirectory by setting this
            Task's subdirectory param. This Task also supports sparse checkouts.
            To perform a sparse checkout, pass a list of comma separated
            directory patterns to this Task's sparseCheckoutDirectories param.
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ''
              description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
              name: revision
              type: string
            - default: ''
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: 'true'
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: '1'
              description: >-
                Perform a shallow clone, fetching only the most recent N
                commits.
              name: depth
              type: string
            - default: 'true'
              description: >-
                Set the `http.sslVerify` global git config. Setting this to
                `false` is not advised unless you are sure that you trust your
                git remote.
              name: sslVerify
              type: string
            - default: ca-bundle.crt
              description: >-
                file name of mounted crt using ssl-ca-directory workspace.
                default value is ca-bundle.crt.
              name: crtFileName
              type: string
            - default: ''
              description: >-
                Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ''
              description: >-
                Define the directory patterns to match or exclude when
                performing a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: 'true'
              description: >-
                Clean out the contents of the destination directory if it
                already exists before cloning.
              name: deleteExisting
              type: string
            - default: ''
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ''
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ''
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: 'true'
              description: >-
                Log the commands that are executed during `git-clone`'s
                operation.
              name: verbose
              type: string
            - default: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: |
                Absolute path to the user's home directory.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
              type: string
            - description: The precise URL that was fetched by this Task.
              name: url
              type: string
          steps:
            - env:
                - name: HOME
                  value: /tekton/home
                - name: PARAM_URL
                  value: >-
                    https://gitea.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/dev-user/globex-ui.git
                - name: PARAM_REVISION
                  value: main
                - name: PARAM_REFSPEC
                - name: PARAM_SUBMODULES
                  value: 'true'
                - name: PARAM_DEPTH
                  value: '1'
                - name: PARAM_SSL_VERIFY
                  value: 'true'
                - name: PARAM_CRT_FILENAME
                  value: ca-bundle.crt
                - name: PARAM_SUBDIRECTORY
                - name: PARAM_DELETE_EXISTING
                  value: 'true'
                - name: PARAM_HTTP_PROXY
                - name: PARAM_HTTPS_PROXY
                - name: PARAM_NO_PROXY
                - name: PARAM_VERBOSE
                  value: 'true'
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                - name: PARAM_USER_HOME
                  value: /tekton/home
                - name: WORKSPACE_OUTPUT_PATH
                  value: /workspace/output
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: 'false'
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: 'false'
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                  value: 'false'
                - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
              image: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
              name: clone
              resources: {}
              script: >
                #!/usr/bin/env sh

                set -eu


                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi



                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi


                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi


                if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                   export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                   if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                      export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                   fi
                fi

                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }


                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi


                test -z "${PARAM_HTTP_PROXY}" || export
                HTTP_PROXY="${PARAM_HTTP_PROXY}"

                test -z "${PARAM_HTTPS_PROXY}" || export
                HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

                test -z "${PARAM_NO_PROXY}" || export
                NO_PROXY="${PARAM_NO_PROXY}"


                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"

                RESULT_SHA="$(git rev-parse HEAD)"

                EXIT_CODE="$?"

                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi

                printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"

                printf "%s" "${PARAM_URL}" > "/tekton/results/url"
              securityContext:
                runAsNonRoot: true
                runAsUser: 65532
          workspaces:
            - description: >-
                The git repo will be cloned onto the volume backing this
                Workspace.
              name: output
            - description: >
                A .ssh directory with private key, known_hosts, config, etc.
                Copied to

                the user's home before git commands are executed. Used to
                authenticate

                with the git remote when performing the clone. Binding a Secret
                to this

                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: >
                A Workspace containing a .gitconfig and .git-credentials file.
                These

                will be copied to the user's home before any git commands are
                run. Any

                other files in this Workspace are ignored. It is strongly
                recommended

                to use ssh-directory over basic-auth whenever possible and to
                bind a

                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
            - description: >
                A workspace containing CA certificates, this will be used by Git
                to

                verify the peer with when fetching or pushing over HTTPS.
              name: ssl-ca-directory
              optional: true
    app-globex-ui-pipeline-tj956-generate-sbom:
      pipelineTaskName: generate-sbom
      status:
        completionTime: '2023-10-18T09:13:09Z'
        conditions:
          - lastTransitionTime: '2023-10-18T09:13:09Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: app-globex-ui-pipeline-tj956-generate-sbom-pod
        startTime: '2023-10-18T09:12:53Z'
        steps:
          - container: step-create-sbom
            imageID: >-
              quay.io/redhat-gpte/syft@sha256:4d67a1419dc0e4802b48c68757901747ecce5a99b7c2a99f934ab590c305af3e
            name: create-sbom
            terminated:
              containerID: >-
                cri-o://bc36c255341c166bfce13d669aee19c803a8219bd875c0c0610cbd30375f873f
              exitCode: 0
              finishedAt: '2023-10-18T09:13:02Z'
              message: >-
                [{"key":"sbomUrl","value":"https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A39feb13d-82a5-4ac9-83a3-a3b548f8e1ab\u0026version=1\r","type":1}]
              reason: Completed
              startedAt: '2023-10-18T09:13:00Z'
          - container: step-scan-sbom
            imageID: >-
              quay.io/redhat-gpte/grype@sha256:dc802d5eee387fb7b553d2f6a7c17ebdbeddc645ca88d4cb5c4920c809493a98
            name: scan-sbom
            terminated:
              containerID: >-
                cri-o://38921536719d97f2e6b493b119a53dd5f3581c99d7add530c52f1e0010217570
              exitCode: 0
              finishedAt: '2023-10-18T09:13:09Z'
              message: >-
                [{"key":"sbomUrl","value":"https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A39feb13d-82a5-4ac9-83a3-a3b548f8e1ab\u0026version=1\r","type":1}]
              reason: Completed
              startedAt: '2023-10-18T09:13:02Z'
        taskResults:
          - name: sbomUrl
            type: string
            value: "https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A39feb13d-82a5-4ac9-83a3-a3b548f8e1ab&version=1\r"
        taskSpec:
          params:
            - default: >-
                https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-tr47n.tr47n.sandbox987.opentlc.com/
              name: cyclonedxHostUrl
              type: string
          results:
            - description: The url location of the generate SBOM
              name: sbomUrl
              type: string
          steps:
            - image: 'quay.io/redhat-gpte/syft:0.88.0'
              name: create-sbom
              resources:
                requests:
                  memory: 1Gi
              script: >
                syft . --output cyclonedx-xml --source-name globex-ui >
                ./bom.xml

                curl -X POST
                https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com/v1/bom
                -H "Content-Type: application/vnd.cyclonedx+xml; version=1.4" -H
                "Accept: */*" -d @bom.xml -D /tmp/header.txt

                LOCATION=$(cat /tmp/header.txt | grep location: | awk '{print
                $2}' | sed 's|http:|https:|g')

                printf "%s" "$LOCATION" > "/tekton/results/sbomUrl"

                echo "SBOM URL accessible on Results of TaskRun
                app-globex-ui-pipeline-tj956-generate-sbom"
              workingDir: /workspace/repository
            - image: 'quay.io/redhat-gpte/grype:0.65.2'
              name: scan-sbom
              resources:
                requests:
                  memory: 1Gi
              script: |
                set -x
                grype sbom:./bom.xml -o table
              workingDir: /workspace/repository
          workspaces:
            - name: repository
    app-globex-ui-pipeline-tj956-scan-source:
      pipelineTaskName: scan-source
      status:
        completionTime: '2023-10-18T09:07:47Z'
        conditions:
          - lastTransitionTime: '2023-10-18T09:07:47Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: app-globex-ui-pipeline-tj956-scan-source-pod
        startTime: '2023-10-18T09:07:27Z'
        steps:
          - container: step-scan-code
            imageID: >-
              docker.io/sonarsource/sonar-scanner-cli@sha256:f3d97bc61071007e83ae1253134606ff43b0902683da526a619e19999446882a
            name: scan-code
            terminated:
              containerID: >-
                cri-o://8ddb5771bb62c7100227c6115dd838e67423864eb583eb029893b922859ebbe1
              exitCode: 0
              finishedAt: '2023-10-18T09:07:46Z'
              reason: Completed
              startedAt: '2023-10-18T09:07:37Z'
        taskSpec:
          params:
            - default: 'docker.io/sonarsource/sonar-scanner-cli:4.7'
              name: scanImage
              type: string
            - default: >-
                https://sonarqube-sonarqube.apps.cluster-tpn6s.sandbox2653.opentlc.com/
              name: sonarqubeHostUrl
              type: string
            - default: object-detection-rest
              name: sonarqubeProjectKey
              type: string
            - default: object-detection-rest-sonarqube-secret
              name: sonarqubeProjectSecret
              type: string
            - default: 'true'
              name: verbose
              type: string
          steps:
            - env:
                - name: SONAR_TOKEN_WEB_UI
                  valueFrom:
                    secretKeyRef:
                      key: token
                      name: globex-ui-sonarqube-secret
              image: 'docker.io/sonarsource/sonar-scanner-cli:4.7'
              name: scan-code
              resources: {}
              script: >
                set -x

                echo $(ls -a)

                sonar-scanner -X -Dsonar.projectKey=globex-ui -Dsonar.sources=./
                -Dsonar.host.url=https://sonarqube-sonarqube.apps.cluster-gm5jr.gm5jr.sandbox2050.opentlc.com
                -Dsonar.login=$SONAR_TOKEN_WEB_UI
              workingDir: /workspace/repository
          workspaces:
            - name: repository
    app-globex-ui-pipeline-tj956-verify-source:
      pipelineTaskName: verify-source
      status:
        completionTime: '2023-10-18T09:07:39Z'
        conditions:
          - lastTransitionTime: '2023-10-18T09:07:39Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: app-globex-ui-pipeline-tj956-verify-source-pod
        startTime: '2023-10-18T09:07:27Z'
        steps:
          - container: step-git-verify
            imageID: >-
              docker.io/alpine/git@sha256:354bafb85446547f1312a692debe66053d476fa0f7b65658d9efda235a051faf
            name: git-verify
            terminated:
              containerID: >-
                cri-o://20c8c2499e52afadff742d2a58c024bb7e00c454fb545dbc387cda22ecf3449a
              exitCode: 0
              finishedAt: '2023-10-18T09:07:38Z'
              reason: Completed
              startedAt: '2023-10-18T09:07:37Z'
        taskSpec:
          description: >-
            This task verifies the latest commit and signature against the gpg
            public key
          steps:
            - image: 'alpine/git:latest'
              name: git-verify
              resources: {}
              script: >
                set -x

                apk add gpg-agent

                gpg --import /workspace/secrets/public.key

                git config --global --add safe.directory /workspace/repository

                git verify-commit HEAD || (echo "Unable to verify commit at
                HEAD!" && exit 1)
              workingDir: /workspace/repository
          workspaces:
            - name: repository
            - name: secrets
