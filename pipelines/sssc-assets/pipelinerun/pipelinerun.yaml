apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    chains.tekton.dev/cert-pipelinerun-5c70be11-668c-4c87-adf8-f158199422bc: ""
    chains.tekton.dev/chain-pipelinerun-5c70be11-668c-4c87-adf8-f158199422bc: ""
    chains.tekton.dev/payload-pipelinerun-5c70be11-668c-4c87-adf8-f158199422bc: 
    chains.tekton.dev/signature-pipelinerun-5c70be11-668c-4c87-adf8-f158199422bc: MEUCIQDhsuEpVkZDfmc2TWB93czqWcUBujgEeznxUaYhv27eqQIgZaabJ4lwZO0m5ckdXjZbf4fQB/QWGwKplZJKbQzIV4c=
    chains.tekton.dev/signed: "true"
    chains.tekton.dev/transparency: https://rekor.sigstore.dev/api/v1/log/entries?logIndex=49783491
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Pipeline","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"globex-ui-pipeline-local-cluster"},"name":"app-globex-ui-pipeline","namespace":"ci"},"spec":{"params":[{"name":"REPO_HOST","type":"string"},{"name":"COMMIT_SHA","type":"string"},{"name":"TLSVERIFY","type":"string"},{"name":"BUILD_EXTRA_ARGS","type":"string"},{"name":"IMAGE_REPO","type":"string"},{"name":"IMAGE_TAG","type":"string"},{"name":"MANIFEST_FILE","type":"string"},{"name":"MANIFEST_FILE_PROD","type":"string"},{"name":"MANIFEST_REPO","type":"string"},{"name":"MANIFEST_REPO_NAME","type":"string"},{"name":"GIT_REF","type":"string"},{"name":"COMMIT_DATE","type":"string"},{"name":"COMMIT_AUTHOR","type":"string"},{"name":"COMMIT_MESSAGE","type":"string"},{"name":"GIT_REPO","type":"string"},{"name":"SONARQUBE_HOST_URL","type":"string"},{"name":"SONARQUBE_PROJECT_KEY","type":"string"},{"name":"SONARQUBE_PROJECT_SECRET","type":"string"},{"name":"CYCLONEDX_HOST_URL","type":"string"}],"tasks":[{"name":"fetch-source","params":[{"name":"url","value":"$(params.GIT_REPO)"},{"name":"revision","value":"$(params.GIT_REF)"},{"name":"deleteExisting","value":"true"}],"taskRef":{"kind":"ClusterTask","name":"git-clone"},"workspaces":[{"name":"output","workspace":"shared-data"}]},{"name":"scan-source","params":[{"name":"sonarqubeHostUrl","value":"$(params.SONARQUBE_HOST_URL)"},{"name":"sonarqubeProjectKey","value":"$(params.SONARQUBE_PROJECT_KEY)"},{"name":"sonarqubeProjectSecret","value":"$(params.SONARQUBE_PROJECT_SECRET)"}],"runAfter":["fetch-source"],"taskRef":{"kind":"Task","name":"scan-code"},"workspaces":[{"name":"repository","workspace":"shared-data"}]},{"name":"verify-source","runAfter":["fetch-source"],"taskRef":{"kind":"Task","name":"verify-source-code"},"workspaces":[{"name":"repository","workspace":"shared-data"},{"name":"secrets","workspace":"secrets"}]},{"name":"build-sign-image","params":[{"name":"IMAGE","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"COMMIT_SHA","value":"$(params.COMMIT_SHA)"}],"retries":1,"runAfter":["scan-source","verify-source"],"taskRef":{"kind":"Task","name":"buildah"},"workspaces":[{"name":"source","workspace":"shared-data"}]},{"name":"acs-image-check","params":[{"name":"rox_central_endpoint","value":"stackrox-endpoint"},{"name":"rox_api_token","value":"stackrox-secret"},{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"insecure-skip-tls-verify","value":"true"}],"runAfter":["build-sign-image"],"taskRef":{"kind":"Task","name":"acs-image-check"}},{"name":"acs-image-scan","params":[{"name":"rox_central_endpoint","value":"stackrox-endpoint"},{"name":"rox_api_token","value":"stackrox-secret"},{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"insecure-skip-tls-verify","value":"true"}],"runAfter":["build-sign-image"],"taskRef":{"kind":"Task","name":"acs-image-scan"}},{"name":"scan-export-sbom","params":[{"name":"cyclonedxHostUrl","value":"$(params.CYCLONEDX_HOST_URL)"},{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"}],"runAfter":["build-sign-image"],"taskRef":{"kind":"Task","name":"scan-export-sbom"},"workspaces":[{"name":"repository","workspace":"shared-data"}]},{"name":"update-dev-manifest","params":[{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"configuration_file","value":"$(params.MANIFEST_FILE)"},{"name":"repository","value":"$(params.MANIFEST_REPO)"},{"name":"git_user_name","value":"$(params.COMMIT_AUTHOR)"}],"runAfter":["acs-image-check","acs-image-scan","scan-export-sbom"],"taskRef":{"kind":"Task","name":"update-manifest"}},{"name":"acs-deploy-check","params":[{"name":"rox_central_endpoint","value":"stackrox-endpoint"},{"name":"rox_api_token","value":"stackrox-secret"},{"name":"gitRepositoryUrl","value":"$(params.MANIFEST_REPO)"},{"name":"gitRepositoryRevision","value":"main"},{"name":"insecure-skip-tls-verify","value":"true"}],"runAfter":["update-dev-manifest"],"taskRef":{"kind":"Task","name":"acs-deploy-check"}},{"name":"verify-tlog-signature","params":[{"name":"registrySecret","value":"image-registry-secret"},{"name":"cosignSecret","value":"cosign-secret"},{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"}],"runAfter":["update-dev-manifest"],"taskRef":{"kind":"Task","name":"rekor-verify"}},{"name":"create-prod-manifest-branch","params":[{"name":"image","value":"$(params.IMAGE_REPO):$(params.IMAGE_TAG)"},{"name":"configuration_file","value":"$(params.MANIFEST_FILE_PROD)"},{"name":"repository","value":"$(params.MANIFEST_REPO)"},{"name":"git_user_name","value":"$(params.COMMIT_AUTHOR)"},{"name":"target-branch","value":"feature-for-$(params.COMMIT_SHA)"}],"runAfter":["acs-deploy-check","verify-tlog-signature"],"taskRef":{"kind":"Task","name":"pr-manifest"}},{"name":"issue-prod-pull-request","params":[{"name":"GITHUB_HOST_URL","value":"$(params.REPO_HOST)"},{"name":"API_PATH_PREFIX","value":"/api/v1"},{"name":"GITHUB_TOKEN_SECRET_NAME","value":"gitea-token"},{"name":"REPO_FULL_NAME","value":"$(params.MANIFEST_REPO_NAME)"},{"name":"HEAD","value":"feature-for-$(params.COMMIT_SHA)"},{"name":"BASE","value":"main"},{"name":"BODY","value":"Update prod image for $(params.COMMIT_MESSAGE)"},{"name":"TITLE","value":"Production update: $(params.COMMIT_MESSAGE)"}],"runAfter":["create-prod-manifest-branch"],"taskRef":{"kind":"Task","name":"gitea-open-pull-request"}}],"workspaces":[{"name":"shared-data"},{"name":"maven-settings"},{"name":"signature"},{"name":"secrets"}]}}
    pipeline.openshift.io/started-by: admin
  creationTimestamp: "2023-11-16T15:23:54Z"
  finalizers:
  - chains.tekton.dev/pipelinerun
  generation: 1
  labels:
    app.kubernetes.io/instance: globex-ui-pipeline-local-cluster
    tekton.dev/pipeline: app-globex-ui-pipeline
    triggers.tekton.dev/eventlistener: app-globex-ui-event-listener
    triggers.tekton.dev/trigger: build-from-push-globex-ui
    triggers.tekton.dev/triggers-eventid: 298b7dec-d02f-491c-abbf-4bd58c7349fa
  name: app-globex-ui-pipeline-t20uuy
  namespace: ci
  resourceVersion: "6134793"
  uid: 659ce748-070b-472f-92ff-1b71b9d5062c
spec:
  params:
  - name: REPO_HOST
    value: gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com
  - name: GIT_REPO
    value: https://gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/globex-ui.git
  - name: TLSVERIFY
    value: "true"
  - name: BUILD_EXTRA_ARGS
    value: $(tt.params.build_extra_args)
  - name: IMAGE_REPO
    value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui
  - name: IMAGE_TAG
    value: main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
  - name: MANIFEST_FILE
    value: gitops/application/globex/overlays/dev/kustomization.yaml
  - name: MANIFEST_FILE_PROD
    value: gitops/application/globex/overlays/prod/kustomization.yaml
  - name: MANIFEST_REPO
    value: https://dev-user:openshift@gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/securing-software-supply-chain
  - name: MANIFEST_REPO_NAME
    value: dev-user/securing-software-supply-chain
  - name: COMMIT_SHA
    value: d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
  - name: GIT_REF
    value: main
  - name: COMMIT_DATE
    value: "2023-11-14T12:33:55Z"
  - name: COMMIT_AUTHOR
    value: dev-user
  - name: COMMIT_MESSAGE
    value: |
      Updates for starting scenario.
  - name: SONARQUBE_HOST_URL
    value: https://sonarqube-sonarqube.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com
  - name: SONARQUBE_PROJECT_KEY
    value: globex-ui
  - name: SONARQUBE_PROJECT_SECRET
    value: globex-ui-sonarqube-secret
  - name: CYCLONEDX_HOST_URL
    value: https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com
  pipelineRef:
    name: app-globex-ui-pipeline
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
  - name: shared-data
    volumeClaimTemplate:
      metadata:
        creationTimestamp: null
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 3Gi
      status: {}
  - emptyDir: {}
    name: maven-settings
  - emptyDir: {}
    name: signature
  - name: secrets
    secret:
      secretName: gpg-public-key
status:
  completionTime: "2023-11-16T15:29:00Z"
  conditions:
  - lastTransitionTime: "2023-11-16T15:29:00Z"
    message: 'Tasks Completed: 10 (Failed: 1, Cancelled 0), Skipped: 2'
    reason: Failed
    status: "False"
    type: Succeeded
  pipelineSpec:
    params:
    - name: REPO_HOST
      type: string
    - name: COMMIT_SHA
      type: string
    - name: TLSVERIFY
      type: string
    - name: BUILD_EXTRA_ARGS
      type: string
    - name: IMAGE_REPO
      type: string
    - name: IMAGE_TAG
      type: string
    - name: MANIFEST_FILE
      type: string
    - name: MANIFEST_FILE_PROD
      type: string
    - name: MANIFEST_REPO
      type: string
    - name: MANIFEST_REPO_NAME
      type: string
    - name: GIT_REF
      type: string
    - name: COMMIT_DATE
      type: string
    - name: COMMIT_AUTHOR
      type: string
    - name: COMMIT_MESSAGE
      type: string
    - name: GIT_REPO
      type: string
    - name: SONARQUBE_HOST_URL
      type: string
    - name: SONARQUBE_PROJECT_KEY
      type: string
    - name: SONARQUBE_PROJECT_SECRET
      type: string
    - name: CYCLONEDX_HOST_URL
      type: string
    tasks:
    - name: fetch-source
      params:
      - name: url
        value: https://gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/globex-ui.git
      - name: revision
        value: main
      - name: deleteExisting
        value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
      - name: output
        workspace: shared-data
    - name: scan-source
      params:
      - name: sonarqubeHostUrl
        value: https://sonarqube-sonarqube.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com
      - name: sonarqubeProjectKey
        value: globex-ui
      - name: sonarqubeProjectSecret
        value: globex-ui-sonarqube-secret
      runAfter:
      - fetch-source
      taskRef:
        kind: Task
        name: scan-code
      workspaces:
      - name: repository
        workspace: shared-data
    - name: verify-source
      runAfter:
      - fetch-source
      taskRef:
        kind: Task
        name: verify-source-code
      workspaces:
      - name: repository
        workspace: shared-data
      - name: secrets
        workspace: secrets
    - name: build-sign-image
      params:
      - name: IMAGE
        value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      - name: COMMIT_SHA
        value: d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      retries: 1
      runAfter:
      - scan-source
      - verify-source
      taskRef:
        kind: Task
        name: buildah
      workspaces:
      - name: source
        workspace: shared-data
    - name: acs-image-check
      params:
      - name: rox_central_endpoint
        value: stackrox-endpoint
      - name: rox_api_token
        value: stackrox-secret
      - name: image
        value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      - name: insecure-skip-tls-verify
        value: "true"
      runAfter:
      - build-sign-image
      taskRef:
        kind: Task
        name: acs-image-check
    - name: acs-image-scan
      params:
      - name: rox_central_endpoint
        value: stackrox-endpoint
      - name: rox_api_token
        value: stackrox-secret
      - name: image
        value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      - name: insecure-skip-tls-verify
        value: "true"
      runAfter:
      - build-sign-image
      taskRef:
        kind: Task
        name: acs-image-scan
    - name: scan-export-sbom
      params:
      - name: cyclonedxHostUrl
        value: https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com
      - name: image
        value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      runAfter:
      - build-sign-image
      taskRef:
        kind: Task
        name: scan-export-sbom
      workspaces:
      - name: repository
        workspace: shared-data
    - name: update-dev-manifest
      params:
      - name: image
        value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      - name: configuration_file
        value: gitops/application/globex/overlays/dev/kustomization.yaml
      - name: repository
        value: https://dev-user:openshift@gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/securing-software-supply-chain
      - name: git_user_name
        value: dev-user
      runAfter:
      - acs-image-check
      - acs-image-scan
      - scan-export-sbom
      taskRef:
        kind: Task
        name: update-manifest
    - name: acs-deploy-check
      params:
      - name: rox_central_endpoint
        value: stackrox-endpoint
      - name: rox_api_token
        value: stackrox-secret
      - name: gitRepositoryUrl
        value: https://dev-user:openshift@gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/securing-software-supply-chain
      - name: gitRepositoryRevision
        value: main
      - name: insecure-skip-tls-verify
        value: "true"
      runAfter:
      - update-dev-manifest
      taskRef:
        kind: Task
        name: acs-deploy-check
    - name: verify-tlog-signature
      params:
      - name: registrySecret
        value: image-registry-secret
      - name: cosignSecret
        value: cosign-secret
      - name: image
        value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      runAfter:
      - update-dev-manifest
      taskRef:
        kind: Task
        name: rekor-verify
    - name: create-prod-manifest-branch
      params:
      - name: image
        value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      - name: configuration_file
        value: gitops/application/globex/overlays/prod/kustomization.yaml
      - name: repository
        value: https://dev-user:openshift@gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/securing-software-supply-chain
      - name: git_user_name
        value: dev-user
      - name: target-branch
        value: feature-for-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      runAfter:
      - acs-deploy-check
      - verify-tlog-signature
      taskRef:
        kind: Task
        name: pr-manifest
    - name: issue-prod-pull-request
      params:
      - name: GITHUB_HOST_URL
        value: gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com
      - name: API_PATH_PREFIX
        value: /api/v1
      - name: GITHUB_TOKEN_SECRET_NAME
        value: gitea-token
      - name: REPO_FULL_NAME
        value: dev-user/securing-software-supply-chain
      - name: HEAD
        value: feature-for-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
      - name: BASE
        value: main
      - name: BODY
        value: |
          Update prod image for Updates for starting scenario.
      - name: TITLE
        value: |
          Production update: Updates for starting scenario.
      runAfter:
      - create-prod-manifest-branch
      taskRef:
        kind: Task
        name: gitea-open-pull-request
    workspaces:
    - name: shared-data
    - name: maven-settings
    - name: signature
    - name: secrets
  skippedTasks:
  - name: create-prod-manifest-branch
    reason: PipelineRun was stopping
  - name: issue-prod-pull-request
    reason: PipelineRun was stopping
  startTime: "2023-11-16T15:23:54Z"
  taskRuns:
    app-globex-ui-pipeline-t20uuy-acs-deploy-check:
      pipelineTaskName: acs-deploy-check
      status:
        completionTime: "2023-11-16T15:28:58Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:28:58Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-acs-deploy-check-pod
        startTime: "2023-11-16T15:28:43Z"
        steps:
        - container: step-git-checkout
          imageID: quay.io/redhat-gpte/alpine-git@sha256:222b2537e5ec606bda8ca38ea5f688845366f8cce036e368e19bc95af8e29ce4
          name: git-checkout
          terminated:
            containerID: cri-o://b69afe4078723f67ef518ed187e1aed4679b9716033149a97f44115bbcf8a86f
            exitCode: 0
            finishedAt: "2023-11-16T15:28:54Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:53Z"
        - container: step-kustomize-build
          imageID: quay.io/wpernath/kustomize-ubi@sha256:c8b739352022801d15c157a3d002633b99876bcc1660279d35c5331958c12825
          name: kustomize-build
          terminated:
            containerID: cri-o://8f89e9c318b7d84430a198d0693c5d48fd7409e0131d473dc48e0cdf1bd8fa71
            exitCode: 0
            finishedAt: "2023-11-16T15:28:54Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:54Z"
        - container: step-kustomize-split
          imageID: docker.io/looztra/kubesplit@sha256:21bf896bb17dc1a9563c05a4a3edfad9690ea52bb0f33f12fe300d5c48e70e6d
          name: kustomize-split
          terminated:
            containerID: cri-o://effcc36cfc723450c6527f473791b645df06ff8bd01cb34344eda45387099f98
            exitCode: 0
            finishedAt: "2023-11-16T15:28:55Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:55Z"
        - container: step-rox-deploy-scan
          imageID: registry.access.redhat.com/ubi8@sha256:cc5aa5922a15039c18864a5111df8fd202fed3300ac42d0f916ad6d66f016a74
          name: rox-deploy-scan
          terminated:
            containerID: cri-o://dc5b8c8d827cd3c203ad9015f0e9272b70ca731354ba5f7d371e6ca233d91903
            exitCode: 0
            finishedAt: "2023-11-16T15:28:58Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:56Z"
        taskSpec:
          description: Policy check a deployment with StackRox/RHACS This tasks allows
            you to check a deployment against build-time policies and apply enforcement
            to fail builds. It's a companion to the stackrox-image-scan task, which
            returns full vulnerability scan results for an image.
          params:
          - description: |
              Secret containing the address:port tuple for StackRox Central)
              (example - rox.stackrox.io:443)
            name: rox_central_endpoint
            type: string
          - description: Secret containing the StackRox API token with CI permissions
            name: rox_api_token
            type: string
          - default: https://dev-user:openshift@gitea.apps.cluster-5khxf.5khxf.sandbox2563.opentlc.com/dev-user/securing-software-supply-chain.git
            name: gitRepositoryUrl
            type: string
          - default: main
            name: gitRepositoryRevision
            type: string
          - default: "true"
            name: verbose
            type: string
          - default: "false"
            description: |
              When set to `"true"`, skip verifying the TLS certs of the Central
              endpoint.  Defaults to `"false"`.
            name: insecure-skip-tls-verify
            type: string
          results:
          - description: Output of `roxctl deployment check`
            name: check_output
            type: string
          steps:
          - image: quay.io/redhat-gpte/alpine-git:latest
            name: git-checkout
            resources: {}
            script: |
              #!/usr/bin/env sh

              set -eu -o pipefail

              if [[ "true" == "true" ]] ; then
                set -x
                echo "**** Cloning https://dev-user:openshift@gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/securing-software-supply-chain into $(pwd)/repository"
              fi

              git clone "https://dev-user:openshift@gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/securing-software-supply-chain" $(pwd)/repository
              cd repository
              git checkout "main"
            volumeMounts:
            - mountPath: /workspace/repository
              name: repository
            workingDir: /workspace
          - image: quay.io/wpernath/kustomize-ubi
            name: kustomize-build
            resources: {}
            script: |
              #!/usr/bin/env sh

              set -eu -o pipefail

              cd repository/gitops/application/globex/overlays/dev

              mkdir -p /workspace/repository/input
              mkdir -p /workspace/repository/output

              kustomize build . --output /workspace/repository/input/all.yaml
            volumeMounts:
            - mountPath: /workspace/repository
              name: repository
            workingDir: /workspace
          - image: looztra/kubesplit
            name: kustomize-split
            resources: {}
            script: |
              #!/usr/bin/env sh

              set -eu -o pipefail
              kubesplit -i /workspace/repository/input/all.yaml -o /workspace/repository/output
            volumeMounts:
            - mountPath: /workspace/repository
              name: repository
            workingDir: /workspace
          - env:
            - name: ROX_API_TOKEN
              valueFrom:
                secretKeyRef:
                  key: rox_api_token
                  name: stackrox-secret
            - name: ROX_CENTRAL_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: rox_central_endpoint
                  name: stackrox-endpoint
            image: registry.access.redhat.com/ubi8:8.7-1026
            name: rox-deploy-scan
            resources: {}
            script: |
              #!/usr/bin/env bash

              set +x

              cd /workspace/repository/output

              curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
                "https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux" \
                --output ./roxctl  \
                > /dev/null

              chmod +x ./roxctl  > /dev/null

              DEPLOYMENT_FILE=$(ls -1a | grep *deployment--globex-ui.yml)

              ./roxctl deployment check \
               $( [ "true" = "true" ] && \
               echo -n "--insecure-skip-tls-verify") \
               -e "$ROX_CENTRAL_ENDPOINT" --file "$DEPLOYMENT_FILE"
            volumeMounts:
            - mountPath: /workspace/repository
              name: repository
            workingDir: /workspace/repository
          volumes:
          - emptyDir: {}
            name: repository
    app-globex-ui-pipeline-t20uuy-acs-image-check:
      pipelineTaskName: acs-image-check
      status:
        completionTime: "2023-11-16T15:28:22Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:28:22Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-acs-image-check-pod
        startTime: "2023-11-16T15:27:57Z"
        steps:
        - container: step-rox-image-check
          imageID: registry.access.redhat.com/ubi8/ubi-minimal@sha256:0e1879febd1be94e0d234060770ce33a543488374d91881259de9119ea75d33f
          name: rox-image-check
          terminated:
            containerID: cri-o://1b7ac1c507aa53582cd9b58c6659612f209476818c2595ee7226c43e7fef0ffa
            exitCode: 0
            finishedAt: "2023-11-16T15:28:22Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:07Z"
        taskSpec:
          description: Policy check an image with StackRox/RHACS This tasks allows
            you to check an image against build-time policies and apply enforcement
            to fail builds. It's a companion to the stackrox-image-scan task, which
            returns full vulnerability scan results for an image.
          params:
          - description: |
              Secret containing the address:port tuple for StackRox Central)
              (example - rox.stackrox.io:443)
            name: rox_central_endpoint
            type: string
          - description: Secret containing the StackRox API token with CI permissions
            name: rox_api_token
            type: string
          - description: |
              Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
            name: image
            type: string
          - default: "false"
            description: |
              When set to `"true"`, skip verifying the TLS certs of the Central
              endpoint.  Defaults to `"false"`.
            name: insecure-skip-tls-verify
            type: string
          results:
          - description: Output of `roxctl image check`
            name: check_output
            type: string
          steps:
          - env:
            - name: ROX_API_TOKEN
              valueFrom:
                secretKeyRef:
                  key: rox_api_token
                  name: stackrox-secret
            - name: ROX_CENTRAL_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: rox_central_endpoint
                  name: stackrox-endpoint
            image: registry.access.redhat.com/ubi8/ubi-minimal
            name: rox-image-check
            resources: {}
            script: |
              #!/usr/bin/env bash
              set +x
              curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
                "https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux" \
                --output ./roxctl  \
                > /dev/null
              chmod +x ./roxctl  > /dev/null
              ./roxctl image check \
                $( [ "true" = "true" ] && \
                echo -n "--insecure-skip-tls-verify") \
                -e "$ROX_CENTRAL_ENDPOINT" --image "quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa"
    app-globex-ui-pipeline-t20uuy-acs-image-scan:
      pipelineTaskName: acs-image-scan
      status:
        completionTime: "2023-11-16T15:28:22Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:28:22Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-acs-image-scan-pod
        startTime: "2023-11-16T15:27:57Z"
        steps:
        - container: step-rox-image-scan
          imageID: registry.access.redhat.com/ubi8/ubi-minimal@sha256:0e1879febd1be94e0d234060770ce33a543488374d91881259de9119ea75d33f
          name: rox-image-scan
          terminated:
            containerID: cri-o://8dfc6e672d28afd21d171153cb8c5614c21c229e049cf74798261e3ff5f469a9
            exitCode: 0
            finishedAt: "2023-11-16T15:28:22Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:07Z"
        taskSpec:
          description: Policy check an image with StackRox/RHACS This tasks allows
            you to check an image against build-time policies and apply enforcement
            to fail builds. It's a companion to the stackrox-image-scan task, which
            returns full vulnerability scan results for an image.
          params:
          - description: |
              Secret containing the address:port tuple for StackRox Central)
              (example - rox.stackrox.io:443)
            name: rox_central_endpoint
            type: string
          - description: Secret containing the StackRox API token with CI permissions
            name: rox_api_token
            type: string
          - description: |
              Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
            name: image
            type: string
          - default: "false"
            description: |
              When set to `"true"`, skip verifying the TLS certs of the Central
              endpoint.  Defaults to `"false"`.
            name: insecure-skip-tls-verify
            type: string
          results:
          - description: Output of `roxctl image check`
            name: check_output
            type: string
          steps:
          - env:
            - name: ROX_API_TOKEN
              valueFrom:
                secretKeyRef:
                  key: rox_api_token
                  name: stackrox-secret
            - name: ROX_CENTRAL_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: rox_central_endpoint
                  name: stackrox-endpoint
            image: registry.access.redhat.com/ubi8/ubi-minimal
            name: rox-image-scan
            resources: {}
            script: |
              #!/usr/bin/env bash
              set +x
              curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" \
                "https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux" \
                --output ./roxctl  \
                > /dev/null
              chmod +x ./roxctl  > /dev/null
              ./roxctl image scan \
                $( [ "true" = "true" ] && \
                echo -n "--insecure-skip-tls-verify") \
                -e "$ROX_CENTRAL_ENDPOINT" --image "quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa"
    app-globex-ui-pipeline-t20uuy-build-sign-image:
      pipelineTaskName: build-sign-image
      status:
        completionTime: "2023-11-16T15:27:57Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:27:57Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-build-sign-image-pod
        startTime: "2023-11-16T15:24:49Z"
        steps:
        - container: step-build
          imageID: quay.io/redhat-appstudio/buildah@sha256:017ec8d3e8e1fefcd47fc11bde655fa9c8f09a279b690be98397875bd542fb44
          name: build
          terminated:
            containerID: cri-o://2f4c509c5530174f40454381c05c42a78eb8602411a427a8d0cdd1b14b6a7865
            exitCode: 0
            finishedAt: "2023-11-16T15:27:43Z"
            reason: Completed
            startedAt: "2023-11-16T15:25:18Z"
        - container: step-sbom-syft-generate
          imageID: quay.io/redhat-appstudio/syft@sha256:f55389239e26db17a6caebbe50657e715f0732e973c6f04928bf1661b0d0257c
          name: sbom-syft-generate
          terminated:
            containerID: cri-o://38cf78882f06cb007d09e6b3243146f262e684d994eadc1222c65e3f46a5a1e4
            exitCode: 0
            finishedAt: "2023-11-16T15:27:46Z"
            reason: Completed
            startedAt: "2023-11-16T15:27:43Z"
        - container: step-analyse-dependencies-java-sbom
          imageID: quay.io/redhat-appstudio/hacbs-jvm-build-request-processor@sha256:b198cf4b33dab59ce8ac25afd4e1001390db29ca2dec83dc8a1e21b0359ce743
          name: analyse-dependencies-java-sbom
          terminated:
            containerID: cri-o://a7fb324379f72253def493c2464260fe47a906e600d362e9b11c5c92e1349c41
            exitCode: 0
            finishedAt: "2023-11-16T15:27:47Z"
            message: '[{"key":"JAVA_COMMUNITY_DEPENDENCIES","value":"","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:27:47Z"
        - container: step-merge-syft-sboms
          imageID: registry.access.redhat.com/ubi9/python-39@sha256:1dfa24e975d48540fe86959dcae6093e3c49efa75670486f18c0133ceeaa74d7
          name: merge-syft-sboms
          terminated:
            containerID: cri-o://40f7f8dad3f40f70378e9bd184ba6fbb4ffe78b222bfe5d6879c6705b48946bf
            exitCode: 0
            finishedAt: "2023-11-16T15:27:48Z"
            message: '[{"key":"JAVA_COMMUNITY_DEPENDENCIES","value":"","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:27:47Z"
        - container: step-merge-cachi2-sbom
          imageID: quay.io/redhat-appstudio/cachi2@sha256:46097f22b57e4d48a3fce96d931e08ccfe3a3e6421362d5f9353961279078eef
          name: merge-cachi2-sbom
          terminated:
            containerID: cri-o://b6a5194e7449cd517f6bec9bc9869ababca52b082963248f1f4ad908360cc41d
            exitCode: 0
            finishedAt: "2023-11-16T15:27:48Z"
            message: '[{"key":"JAVA_COMMUNITY_DEPENDENCIES","value":"","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:27:48Z"
        - container: step-create-purl-sbom
          imageID: registry.access.redhat.com/ubi9/python-39@sha256:1dfa24e975d48540fe86959dcae6093e3c49efa75670486f18c0133ceeaa74d7
          name: create-purl-sbom
          terminated:
            containerID: cri-o://e485abd143a906d88300c1949054d3d4d907a05cd129e19299c3142a72f9e724
            exitCode: 0
            finishedAt: "2023-11-16T15:27:48Z"
            message: '[{"key":"JAVA_COMMUNITY_DEPENDENCIES","value":"","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:27:48Z"
        - container: step-inject-sbom-and-push
          imageID: quay.io/redhat-appstudio/buildah@sha256:017ec8d3e8e1fefcd47fc11bde655fa9c8f09a279b690be98397875bd542fb44
          name: inject-sbom-and-push
          terminated:
            containerID: cri-o://1a9970cd61c98d82c26108afa8291943ba86690e73b74c9465f0a8cf788e42f4
            exitCode: 0
            finishedAt: "2023-11-16T15:27:55Z"
            message: '[{"key":"BASE_IMAGES_DIGESTS","value":"registry.access.redhat.com/ubi9/nodejs-18:1@sha256:7dc634bf428cd719b32cd0343dcd75637a7e4b4ff8f5325cfa3d1ba1220acf97\nregistry.access.redhat.com/ubi9/nodejs-18-minimal:1@sha256:3b0ba92faaa60f57f661a6846fb38ad5f4f85e56842c5711c7cc4720019f3767\n","type":1},{"key":"IMAGE_DIGEST","value":"sha256:964da0846eef37702af296b45a50985315c8ae2004c6c2f4e53e165310562faa","type":1},{"key":"IMAGE_URL","value":"quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa","type":1},{"key":"JAVA_COMMUNITY_DEPENDENCIES","value":"","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:27:48Z"
        - container: step-upload-sbom
          imageID: quay.io/redhat-appstudio/cosign@sha256:c883d6f8d39148f2cea71bff4622d196d89df3e510f36c140c097b932f0dd5d5
          name: upload-sbom
          terminated:
            containerID: cri-o://e6160e51011993887c62cfe802636ab3414674633382e9fd67880fb2e0ecf0d8
            exitCode: 0
            finishedAt: "2023-11-16T15:27:57Z"
            message: '[{"key":"BASE_IMAGES_DIGESTS","value":"registry.access.redhat.com/ubi9/nodejs-18:1@sha256:7dc634bf428cd719b32cd0343dcd75637a7e4b4ff8f5325cfa3d1ba1220acf97\nregistry.access.redhat.com/ubi9/nodejs-18-minimal:1@sha256:3b0ba92faaa60f57f661a6846fb38ad5f4f85e56842c5711c7cc4720019f3767\n","type":1},{"key":"IMAGE_DIGEST","value":"sha256:964da0846eef37702af296b45a50985315c8ae2004c6c2f4e53e165310562faa","type":1},{"key":"IMAGE_URL","value":"quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa","type":1},{"key":"JAVA_COMMUNITY_DEPENDENCIES","value":"","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:27:55Z"
        taskResults:
        - name: JAVA_COMMUNITY_DEPENDENCIES
          type: string
          value: ""
        - name: BASE_IMAGES_DIGESTS
          type: string
          value: |
            registry.access.redhat.com/ubi9/nodejs-18:1@sha256:7dc634bf428cd719b32cd0343dcd75637a7e4b4ff8f5325cfa3d1ba1220acf97
            registry.access.redhat.com/ubi9/nodejs-18-minimal:1@sha256:3b0ba92faaa60f57f661a6846fb38ad5f4f85e56842c5711c7cc4720019f3767
        - name: IMAGE_DIGEST
          type: string
          value: sha256:964da0846eef37702af296b45a50985315c8ae2004c6c2f4e53e165310562faa
        - name: IMAGE_URL
          type: string
          value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
        taskSpec:
          description: |-
            Buildah task builds source code into a container image and pushes the image into container registry using buildah tool.
            In addition it generates a SBOM file, injects the SBOM file into final container image and pushes the SBOM file as separate image using cosign tool.
            When [Java dependency rebuild](https://redhat-appstudio.github.io/docs.stonesoup.io/Documentation/main/cli/proc_enabled_java_dependencies.html) is enabled it triggers rebuilds of Java artifacts.
            When prefetch-dependencies task was activated it is using its artifacts to run build in hermetic environment.
          params:
          - description: Reference of the image buildah will produce.
            name: IMAGE
            type: string
          - default: quay.io/redhat-appstudio/buildah:v1.31.0@sha256:34f12c7b72ec2c28f1ded0c494b428df4791c909f1f174dd21b8ed6a57cf5ddb
            description: The location of the buildah builder image.
            name: BUILDER_IMAGE
            type: string
          - default: ./Dockerfile
            description: Path to the Dockerfile to build.
            name: DOCKERFILE
            type: string
          - default: .
            description: Path to the directory to use as context.
            name: CONTEXT
            type: string
          - default: "true"
            description: Verify the TLS on the registry endpoint (for push/pull to
              a non-TLS registry)
            name: TLSVERIFY
            type: string
          - default: ""
            description: unused, should be removed in next task version
            name: DOCKER_AUTH
            type: string
          - default: "false"
            description: Determines if build will be executed without network access.
            name: HERMETIC
            type: string
          - default: ""
            description: In case it is not empty, the prefetched content should be
              made available to the build.
            name: PREFETCH_INPUT
            type: string
          - default: ""
            description: Delete image tag after specified time. Empty means to keep
              the image tag. Time values could be something like 1h, 2d, 3w for hours,
              days, and weeks, respectively.
            name: IMAGE_EXPIRES_AFTER
            type: string
          - default: ""
            description: The image is built from this commit.
            name: COMMIT_SHA
            type: string
          results:
          - description: Digest of the image just built
            name: IMAGE_DIGEST
            type: string
          - description: Image repository where the built image was pushed
            name: IMAGE_URL
            type: string
          - description: Digests of the base images used for build
            name: BASE_IMAGES_DIGESTS
            type: string
          - description: The counting of Java components by publisher in JSON format
            name: SBOM_JAVA_COMPONENTS_COUNT
            type: string
          - description: The Java dependencies that came from community sources such
              as Maven central.
            name: JAVA_COMMUNITY_DEPENDENCIES
            type: string
          stepTemplate:
            env:
            - name: BUILDAH_FORMAT
              value: oci
            - name: STORAGE_DRIVER
              value: vfs
            - name: HERMETIC
              value: "false"
            - name: PREFETCH_INPUT
            - name: CONTEXT
              value: .
            - name: DOCKERFILE
              value: ./Dockerfile
            - name: IMAGE
              value: quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
            - name: TLSVERIFY
              value: "true"
            - name: IMAGE_EXPIRES_AFTER
            name: ""
            resources: {}
          steps:
          - env:
            - name: COMMIT_SHA
              value: d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
            image: quay.io/redhat-appstudio/buildah:v1.31.0@sha256:34f12c7b72ec2c28f1ded0c494b428df4791c909f1f174dd21b8ed6a57cf5ddb
            name: build
            resources:
              limits:
                cpu: "2"
                memory: 4Gi
              requests:
                cpu: 250m
                memory: 512Mi
            script: |
              echo $(ls -a)
              SOURCE_CODE_DIR=./
              if [ -e "$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE" ]; then
                dockerfile_path="$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE"
              elif [ -e "$SOURCE_CODE_DIR/$DOCKERFILE" ]; then
                dockerfile_path="$SOURCE_CODE_DIR/$DOCKERFILE"
              elif echo "$DOCKERFILE" | grep -q "^https\?://"; then
                echo "Fetch Dockerfile from $DOCKERFILE"
                dockerfile_path=$(mktemp --suffix=-Dockerfile)
                http_code=$(curl -s -L -w "%{http_code}" --output "$dockerfile_path" "$DOCKERFILE")
                if [ $http_code != 200 ]; then
                  echo "No Dockerfile is fetched. Server responds $http_code"
                  exit 1
                fi
                http_code=$(curl -s -L -w "%{http_code}" --output "$dockerfile_path.dockerignore.tmp" "$DOCKERFILE.dockerignore")
                if [ $http_code = 200 ]; then
                  echo "Fetched .dockerignore from $DOCKERFILE.dockerignore"
                  mv "$dockerfile_path.dockerignore.tmp" $SOURCE_CODE_DIR/$CONTEXT/.dockerignore
                fi
              else
                echo "Cannot find Dockerfile $DOCKERFILE"
                exit 1
              fi
              if [ -n "$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR" ] && grep -q '^\s*RUN \(./\)\?mvn' "$dockerfile_path"; then
                sed -i -e "s|^\s*RUN \(\(./\)\?mvn\(.*\)\)|RUN echo \"<settings><mirrors><mirror><id>mirror.default</id><url>http://$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR/v1/cache/default/0/</url><mirrorOf>*</mirrorOf></mirror></mirrors></settings>\" > /tmp/settings.yaml; \1 -s /tmp/settings.yaml|g" "$dockerfile_path"
                touch /var/lib/containers/java
              fi

              # Fixing group permission on /var/lib/containers
              chown root:root /var/lib/containers

              sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

              # Setting new namespace to run buildah - 2^32-2
              echo 'root:1:4294967294' | tee -a /etc/subuid >> /etc/subgid

              if [ "${HERMETIC}" == "true" ]; then
                BUILDAH_ARGS="--pull=never"
                UNSHARE_ARGS="--net"
                for image in $(grep -i '^\s*FROM' "$dockerfile_path" | sed 's/--platform=\S*//' | awk '{print $2}'); do
                  unshare -Ufp --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -- buildah pull $image
                done
                echo "Build will be executed with network isolation"
              fi

              if [ -n "${PREFETCH_INPUT}" ]; then
                cp -r cachi2 /tmp/
                chmod -R go+rwX /tmp/cachi2
                VOLUME_MOUNTS="--volume /tmp/cachi2:/cachi2"
                sed -i 's|^\s*run |RUN . /cachi2/cachi2.env \&\& \\\n    |i' "$dockerfile_path"
                echo "Prefetched content will be made available"
              fi

              LABELS=(
                "--label" "build-date=$(date -u +'%Y-%m-%dT%H:%M:%S')"
                "--label" "architecture=$(uname -m)"
                "--label" "vcs-type=git"
              )
              [ -n "$COMMIT_SHA" ] && LABELS+=("--label" "vcs-ref=$COMMIT_SHA")
              [ -n "$IMAGE_EXPIRES_AFTER" ] && LABELS+=("--label" "quay.expires-after=$IMAGE_EXPIRES_AFTER")

              unshare -Uf $UNSHARE_ARGS --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -- buildah build \
                $VOLUME_MOUNTS \
                $BUILDAH_ARGS \
                ${LABELS[@]} \
                --tls-verify=$TLSVERIFY --no-cache \
                --ulimit nofile=4096:4096 \
                -f "$dockerfile_path" -t $IMAGE $SOURCE_CODE_DIR/$CONTEXT

              container=$(buildah from --pull-never $IMAGE)
              buildah mount $container | tee /workspace/container_path
              echo $container > /workspace/container_name

              # Save the SBOM produced by Cachi2 so it can be merged into the final SBOM later
              if [ -n "${PREFETCH_INPUT}" ]; then
                cp /tmp/cachi2/output/bom.json ./sbom-cachi2.json
              fi
            securityContext:
              capabilities:
                add:
                - SETFCAP
            volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
            workingDir: /workspace/source
          - image: quay.io/redhat-appstudio/syft:v0.94.0
            name: sbom-syft-generate
            resources: {}
            script: |
              syft dir:/workspace/source --output cyclonedx-json=/workspace/source/sbom-source.json
              find $(cat /workspace/container_path) -xtype l -delete
              syft dir:$(cat /workspace/container_path) --output cyclonedx-json=/workspace/source/sbom-image.json
            volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
          - image: quay.io/redhat-appstudio/hacbs-jvm-build-request-processor:1d417e6f1f3e68c6c537333b5759796eddae0afc
            name: analyse-dependencies-java-sbom
            resources: {}
            script: |
              if [ -f /var/lib/containers/java ]; then
                /opt/jboss/container/java/run/run-java.sh analyse-dependencies path $(cat /workspace/container_path) -s /workspace/source/sbom-image.json --task-run-name app-globex-ui-pipeline-t20uuy-build-sign-image --publishers /tekton/results/SBOM_JAVA_COMPONENTS_COUNT
                sed -i 's/^/ /' /tekton/results/SBOM_JAVA_COMPONENTS_COUNT # Workaround for SRVKP-2875
              else
                touch /tekton/results/JAVA_COMMUNITY_DEPENDENCIES
              fi
            securityContext:
              runAsUser: 0
            volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
          - image: registry.access.redhat.com/ubi9/python-39:1-143.1696863474
            name: merge-syft-sboms
            resources: {}
            script: |
              #!/bin/python3
              import json

              # load SBOMs
              with open("./sbom-image.json") as f:
                image_sbom = json.load(f)

              with open("./sbom-source.json") as f:
                source_sbom = json.load(f)

              # fetch unique components from available SBOMs
              def get_identifier(component):
                return component["name"] + '@' + component.get("version", "")

              image_sbom_components = image_sbom.get("components", [])
              existing_components = [get_identifier(component) for component in image_sbom_components]

              source_sbom_components = source_sbom.get("components", [])
              for component in source_sbom_components:
                if get_identifier(component) not in existing_components:
                  image_sbom_components.append(component)
                  existing_components.append(get_identifier(component))

              image_sbom_components.sort(key=lambda c: get_identifier(c))

              # write the CycloneDX unified SBOM
              with open("./sbom-cyclonedx.json", "w") as f:
                json.dump(image_sbom, f, indent=4)
            securityContext:
              runAsUser: 0
            workingDir: /workspace/source
          - image: quay.io/redhat-appstudio/cachi2:0.3.0@sha256:46097f22b57e4d48a3fce96d931e08ccfe3a3e6421362d5f9353961279078eef
            name: merge-cachi2-sbom
            resources: {}
            script: |
              if [ -n "${PREFETCH_INPUT}" ]; then
                echo "Merging contents of sbom-cachi2.json into sbom-cyclonedx.json"
                /src/utils/merge_syft_sbom.py sbom-cachi2.json sbom-cyclonedx.json > sbom-temp.json
                mv sbom-temp.json sbom-cyclonedx.json
              else
                echo "Skipping step since no Cachi2 SBOM was produced"
              fi
            securityContext:
              runAsUser: 0
            workingDir: /workspace/source
          - image: registry.access.redhat.com/ubi9/python-39:1-143.1696863474
            name: create-purl-sbom
            resources: {}
            script: |
              #!/bin/python3
              import json

              with open("./sbom-cyclonedx.json") as f:
                cyclonedx_sbom = json.load(f)

              purls = [{"purl": component["purl"]} for component in cyclonedx_sbom.get("components", []) if "purl" in component]
              purl_content = {"image_contents": {"dependencies": purls}}

              with open("sbom-purl.json", "w") as output_file:
                json.dump(purl_content, output_file, indent=4)
            securityContext:
              runAsUser: 0
            workingDir: /workspace/source
          - image: quay.io/redhat-appstudio/buildah:v1.31.0@sha256:34f12c7b72ec2c28f1ded0c494b428df4791c909f1f174dd21b8ed6a57cf5ddb
            name: inject-sbom-and-push
            resources: {}
            script: |
              # Expose base image digests
              buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' | grep -v $IMAGE > /tekton/results/BASE_IMAGES_DIGESTS

              base_image_name=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.name"}}' $IMAGE | cut -f1 -d'@')
              base_image_digest=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.digest"}}' $IMAGE)
              container=$(buildah from --pull-never $IMAGE)
              buildah copy $container sbom-cyclonedx.json sbom-purl.json /root/buildinfo/content_manifests/
              buildah config -a org.opencontainers.image.base.name=${base_image_name} -a org.opencontainers.image.base.digest=${base_image_digest} $container
              buildah commit $container $IMAGE

              status=-1
              max_run=5
              sleep_sec=10
              for run in $(seq 1 $max_run); do
                status=0
                [ "$run" -gt 1 ] && sleep $sleep_sec
                echo "Pushing sbom image to registry"
                buildah push \
                  --tls-verify=$TLSVERIFY \
                  --digestfile /workspace/source/image-digest $IMAGE \
                  docker://$IMAGE && break || status=$?
              done
              if [ "$status" -ne 0 ]; then
                  echo "Failed to push sbom image to registry after ${max_run} tries"
                  exit 1
              fi

              cat "/workspace/source"/image-digest | tee /tekton/results/IMAGE_DIGEST
              echo -n "$IMAGE" | tee /tekton/results/IMAGE_URL
            securityContext:
              capabilities:
                add:
                - SETFCAP
              runAsUser: 0
            volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
            workingDir: /workspace/source
          - args:
            - attach
            - sbom
            - --sbom
            - sbom-cyclonedx.json
            - --type
            - cyclonedx
            - quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
            image: quay.io/redhat-appstudio/cosign:v2.1.1
            name: upload-sbom
            resources: {}
            workingDir: /workspace/source
          volumes:
          - emptyDir: {}
            name: varlibcontainers
          workspaces:
          - description: Workspace containing the source code to build.
            name: source
    app-globex-ui-pipeline-t20uuy-fetch-source:
      pipelineTaskName: fetch-source
      status:
        completionTime: "2023-11-16T15:24:11Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:24:11Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-fetch-source-pod
        startTime: "2023-11-16T15:23:55Z"
        steps:
        - container: step-clone
          imageID: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
          name: clone
          terminated:
            containerID: cri-o://9ffc8e0ac58783f928ca03adbd28e0e26badba2fe4773b061e8a3bd5184429a8
            exitCode: 0
            finishedAt: "2023-11-16T15:24:10Z"
            message: '[{"key":"commit","value":"d92d5a055f1621ec7464f5c036b1eabc94b4bfaa","type":1},{"key":"url","value":"https://gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/globex-ui.git","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:24:10Z"
        taskResults:
        - name: commit
          type: string
          value: d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
        - name: url
          type: string
          value: https://gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/globex-ui.git
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          params:
          - description: Repository URL to clone from.
            name: url
            type: string
          - default: ""
            description: Revision to checkout. (branch, tag, sha, ref, etc...)
            name: revision
            type: string
          - default: ""
            description: Refspec to fetch before checking out revision.
            name: refspec
            type: string
          - default: "true"
            description: Initialize and fetch git submodules.
            name: submodules
            type: string
          - default: "1"
            description: Perform a shallow clone, fetching only the most recent N
              commits.
            name: depth
            type: string
          - default: "true"
            description: Set the `http.sslVerify` global git config. Setting this
              to `false` is not advised unless you are sure that you trust your git
              remote.
            name: sslVerify
            type: string
          - default: ca-bundle.crt
            description: file name of mounted crt using ssl-ca-directory workspace.
              default value is ca-bundle.crt.
            name: crtFileName
            type: string
          - default: ""
            description: Subdirectory inside the `output` Workspace to clone the repo
              into.
            name: subdirectory
            type: string
          - default: ""
            description: Define the directory patterns to match or exclude when performing
              a sparse checkout.
            name: sparseCheckoutDirectories
            type: string
          - default: "true"
            description: Clean out the contents of the destination directory if it
              already exists before cloning.
            name: deleteExisting
            type: string
          - default: ""
            description: HTTP proxy server for non-SSL requests.
            name: httpProxy
            type: string
          - default: ""
            description: HTTPS proxy server for SSL requests.
            name: httpsProxy
            type: string
          - default: ""
            description: Opt out of proxying HTTP/HTTPS requests.
            name: noProxy
            type: string
          - default: "true"
            description: Log the commands that are executed during `git-clone`'s operation.
            name: verbose
            type: string
          - default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
            description: The image providing the git-init binary that this Task runs.
            name: gitInitImage
            type: string
          - default: /tekton/home
            description: |
              Absolute path to the user's home directory.
            name: userHome
            type: string
          results:
          - description: The precise commit SHA that was fetched by this Task.
            name: commit
            type: string
          - description: The precise URL that was fetched by this Task.
            name: url
            type: string
          steps:
          - env:
            - name: HOME
              value: /tekton/home
            - name: PARAM_URL
              value: https://gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/globex-ui.git
            - name: PARAM_REVISION
              value: main
            - name: PARAM_REFSPEC
            - name: PARAM_SUBMODULES
              value: "true"
            - name: PARAM_DEPTH
              value: "1"
            - name: PARAM_SSL_VERIFY
              value: "true"
            - name: PARAM_CRT_FILENAME
              value: ca-bundle.crt
            - name: PARAM_SUBDIRECTORY
            - name: PARAM_DELETE_EXISTING
              value: "true"
            - name: PARAM_HTTP_PROXY
            - name: PARAM_HTTPS_PROXY
            - name: PARAM_NO_PROXY
            - name: PARAM_VERBOSE
              value: "true"
            - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
            - name: PARAM_USER_HOME
              value: /tekton/home
            - name: WORKSPACE_OUTPUT_PATH
              value: /workspace/output
            - name: WORKSPACE_SSH_DIRECTORY_BOUND
              value: "false"
            - name: WORKSPACE_SSH_DIRECTORY_PATH
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
              value: "false"
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
            - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
              value: "false"
            - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
            image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:2b4c4958cabdceffefef68940608f2c7e6774c0b94ba3eb49fa1b9ff0b544e8c
            name: clone
            resources: {}
            script: |
              #!/usr/bin/env sh
              set -eu

              if [ "${PARAM_VERBOSE}" = "true" ] ; then
                set -x
              fi


              if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                chmod 400 "${PARAM_USER_HOME}/.gitconfig"
              fi

              if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                chmod 700 "${PARAM_USER_HOME}"/.ssh
                chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
              fi

              if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                 export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                 if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                    export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                 fi
              fi
              CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

              cleandir() {
                # Delete any existing contents of the repo directory if it exists.
                #
                # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                # or the root of a mounted volume.
                if [ -d "${CHECKOUT_DIR}" ] ; then
                  # Delete non-hidden files and directories
                  rm -rf "${CHECKOUT_DIR:?}"/*
                  # Delete files and directories starting with . but excluding ..
                  rm -rf "${CHECKOUT_DIR}"/.[!.]*
                  # Delete files and directories starting with .. plus any other character
                  rm -rf "${CHECKOUT_DIR}"/..?*
                fi
              }

              if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                cleandir
              fi

              test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
              test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
              test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

              /ko-app/git-init \
                -url="${PARAM_URL}" \
                -revision="${PARAM_REVISION}" \
                -refspec="${PARAM_REFSPEC}" \
                -path="${CHECKOUT_DIR}" \
                -sslVerify="${PARAM_SSL_VERIFY}" \
                -submodules="${PARAM_SUBMODULES}" \
                -depth="${PARAM_DEPTH}" \
                -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
              cd "${CHECKOUT_DIR}"
              RESULT_SHA="$(git rev-parse HEAD)"
              EXIT_CODE="$?"
              if [ "${EXIT_CODE}" != 0 ] ; then
                exit "${EXIT_CODE}"
              fi
              printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"
              printf "%s" "${PARAM_URL}" > "/tekton/results/url"
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
          workspaces:
          - description: The git repo will be cloned onto the volume backing this
              Workspace.
            name: output
          - description: |
              A .ssh directory with private key, known_hosts, config, etc. Copied to
              the user's home before git commands are executed. Used to authenticate
              with the git remote when performing the clone. Binding a Secret to this
              Workspace is strongly recommended over other volume types.
            name: ssh-directory
            optional: true
          - description: |
              A Workspace containing a .gitconfig and .git-credentials file. These
              will be copied to the user's home before any git commands are run. Any
              other files in this Workspace are ignored. It is strongly recommended
              to use ssh-directory over basic-auth whenever possible and to bind a
              Secret to this Workspace over other volume types.
            name: basic-auth
            optional: true
          - description: |
              A workspace containing CA certificates, this will be used by Git to
              verify the peer with when fetching or pushing over HTTPS.
            name: ssl-ca-directory
            optional: true
    app-globex-ui-pipeline-t20uuy-scan-export-sbom:
      pipelineTaskName: scan-export-sbom
      status:
        completionTime: "2023-11-16T15:28:35Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:28:35Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-scan-export-sbom-pod
        startTime: "2023-11-16T15:27:58Z"
        steps:
        - container: step-get-sbom
          imageID: quay.io/redhat-appstudio/cosign@sha256:c883d6f8d39148f2cea71bff4622d196d89df3e510f36c140c097b932f0dd5d5
          name: get-sbom
          terminated:
            containerID: cri-o://8640590911cfb54b3f0dbf5872b22969bf3672da30cc6c8d83441a4589ca037c
            exitCode: 0
            finishedAt: "2023-11-16T15:28:26Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:25Z"
        - container: step-scan-sbom
          imageID: quay.io/redhat-gpte/grype@sha256:dc802d5eee387fb7b553d2f6a7c17ebdbeddc645ca88d4cb5c4920c809493a98
          name: scan-sbom
          terminated:
            containerID: cri-o://10c4f14cb68d3ef0b9f2116549c7f5b465c8d1f9f915ee33bcfcce315bc58e6a
            exitCode: 0
            finishedAt: "2023-11-16T15:28:33Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:27Z"
        - container: step-export-sbom
          imageID: registry.access.redhat.com/ubi9/ubi@sha256:5dc85ec81a0d2cc5d19164f80b8d287b176483fd09a88426ca2f698bb2bd09de
          name: export-sbom
          terminated:
            containerID: cri-o://94489814f5fa3b2b6c4ed1094aad1e60348766aed1e56f169e11d1ad17141a66
            exitCode: 0
            finishedAt: "2023-11-16T15:28:34Z"
            message: '[{"key":"sbomUrl","value":"https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A0c19d5c2-0f67-4a4e-9dd8-bd32c9057566\u0026version=1\r","type":1}]'
            reason: Completed
            startedAt: "2023-11-16T15:28:34Z"
        taskResults:
        - name: sbomUrl
          type: string
          value: "https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/v1/bom?serialNumber=urn%3Auuid%3A0c19d5c2-0f67-4a4e-9dd8-bd32c9057566&version=1\r"
        taskSpec:
          params:
          - default: https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-rrcp2.rrcp2.sandbox2991.opentlc.com
            name: cyclonedxHostUrl
            type: string
          - name: image
            type: string
          results:
          - description: The url location of the generate SBOM
            name: sbomUrl
            type: string
          steps:
          - args:
            - download
            - sbom
            - quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa
            - --output-file
            - bom.json
            image: quay.io/redhat-appstudio/cosign:v2.1.1
            name: get-sbom
            resources: {}
            workingDir: /workspace/repository
          - image: quay.io/redhat-gpte/grype:0.65.2
            name: scan-sbom
            resources:
              requests:
                memory: 1Gi
            script: |
              set -x
              grype sbom:./bom.json -o table
            workingDir: /workspace/repository
          - image: ubi9/ubi
            name: export-sbom
            resources:
              requests:
                memory: 1Gi
            script: |
              set +x
              curl -X POST https://cyclonedx-bom-repo-server-cyclonedx.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/v1/bom -H "Content-Type: application/vnd.cyclonedx+json; version=1.4" -H "Accept: */*" -d @bom.json -D /tmp/header.txt > /dev/null
              LOCATION=$(cat /tmp/header.txt | grep location: | awk '{print $2}' | sed 's|http:|https:|g')
              echo $LOCATION
              printf "%s" "$LOCATION" > "/tekton/results/sbomUrl"
            workingDir: /workspace/repository
          workspaces:
          - name: repository
    app-globex-ui-pipeline-t20uuy-scan-source:
      pipelineTaskName: scan-source
      status:
        completionTime: "2023-11-16T15:24:48Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:24:48Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-scan-source-pod
        startTime: "2023-11-16T15:24:11Z"
        steps:
        - container: step-scan-code
          imageID: docker.io/sonarsource/sonar-scanner-cli@sha256:f3d97bc61071007e83ae1253134606ff43b0902683da526a619e19999446882a
          name: scan-code
          terminated:
            containerID: cri-o://17739d8b900d1bc8c554e8fe8bbfcbcd54d81171b352353e17d3b8e4851cb000
            exitCode: 0
            finishedAt: "2023-11-16T15:24:47Z"
            reason: Completed
            startedAt: "2023-11-16T15:24:37Z"
        taskSpec:
          params:
          - default: docker.io/sonarsource/sonar-scanner-cli:4.7
            name: scanImage
            type: string
          - default: https://sonarqube-sonarqube.apps.cluster-tpn6s.sandbox2653.opentlc.com/
            name: sonarqubeHostUrl
            type: string
          - default: object-detection-rest
            name: sonarqubeProjectKey
            type: string
          - default: object-detection-rest-sonarqube-secret
            name: sonarqubeProjectSecret
            type: string
          - default: "true"
            name: verbose
            type: string
          steps:
          - env:
            - name: SONAR_TOKEN_WEB_UI
              valueFrom:
                secretKeyRef:
                  key: token
                  name: globex-ui-sonarqube-secret
            image: docker.io/sonarsource/sonar-scanner-cli:4.7
            name: scan-code
            resources: {}
            script: |
              set -x
              echo $(ls -a)
              sonar-scanner -X -Dsonar.projectKey=globex-ui -Dsonar.sources=./ -Dsonar.host.url=https://sonarqube-sonarqube.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com -Dsonar.login=$SONAR_TOKEN_WEB_UI
            workingDir: /workspace/repository
          workspaces:
          - name: repository
    app-globex-ui-pipeline-t20uuy-update-dev-manifest:
      pipelineTaskName: update-dev-manifest
      status:
        completionTime: "2023-11-16T15:28:43Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:28:43Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-update-dev-manifest-pod
        startTime: "2023-11-16T15:28:35Z"
        steps:
        - container: step-git
          imageID: docker.io/alpine/git@sha256:26a4a373c8335762a6f7b3f34a04b599c541599314995ef6584881ddf3e1dc78
          name: git
          terminated:
            containerID: cri-o://664c113f0c5a6f4de140158bcae002be188a3e5cd5df2e9519b4720b14a3db0c
            exitCode: 0
            finishedAt: "2023-11-16T15:28:43Z"
            reason: Completed
            startedAt: "2023-11-16T15:28:42Z"
        taskSpec:
          description: This task updates the manifest for the current application
            to point to the image tag created with the short commit.
          params:
          - description: Used to tag the built image.
            name: image
            type: string
          - default: main
            description: Target branch to push to
            name: target-branch
            type: string
          - default: Tekton Pipeline
            description: Git user name for performing the push operation.
            name: git_user_name
            type: string
          - default: tekton@tekton.com
            description: Git user email for performing the push operation.
            name: git_user_email
            type: string
          - description: File in which the image configuration is stored.
            name: configuration_file
            type: string
          - description: Repo in which the image configuration is stored.
            name: repository
            type: string
          steps:
          - image: alpine/git:latest
            name: git
            resources: {}
            script: |
              # Setting up the git config.
              git config --global user.email "tekton@tekton.com"
              git config --global user.name "dev-user"

              # Checkout target branch to avoid the detached HEAD state
              TMPDIR=$(mktemp -d)

              cd $TMPDIR
              git clone https://dev-user:openshift@gitea.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/dev-user/securing-software-supply-chain
              cd securing-software-supply-chain
              git checkout main

              # Set to the short commit value passed as parameter.
              # Notice the enclosing " to keep it as a string in the resulting YAML.
              IMAGE=\"quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa\"

              sed -i "s#\(.*value:\s*\).*#\1 ${IMAGE}#" gitops/application/globex/overlays/dev/kustomization.yaml

              git add gitops/application/globex/overlays/dev/kustomization.yaml
              git commit -m "Automatically updated manifest to point to image tag $IMAGE"
              git push origin main
    app-globex-ui-pipeline-t20uuy-verify-source:
      pipelineTaskName: verify-source
      status:
        completionTime: "2023-11-16T15:24:32Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:24:32Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-verify-source-pod
        startTime: "2023-11-16T15:24:11Z"
        steps:
        - container: step-git-verify
          imageID: docker.io/alpine/git@sha256:26a4a373c8335762a6f7b3f34a04b599c541599314995ef6584881ddf3e1dc78
          name: git-verify
          terminated:
            containerID: cri-o://6bbd324970d8363f986374fdae87fbcde8caafb7adb12664214c5fbb21e95ae9
            exitCode: 0
            finishedAt: "2023-11-16T15:24:31Z"
            reason: Completed
            startedAt: "2023-11-16T15:24:31Z"
        taskSpec:
          description: This task verifies the latest commit and signature against
            the gpg public key
          steps:
          - image: alpine/git:latest
            name: git-verify
            resources: {}
            script: |
              set -x
              apk add gpg-agent
              gpg --import /workspace/secrets/public.key
              git config --global --add safe.directory /workspace/repository
              git verify-commit HEAD || (echo "Unable to verify commit at HEAD!" && exit 1)
            workingDir: /workspace/repository
          workspaces:
          - name: repository
          - name: secrets
    app-globex-ui-pipeline-t20uuy-verify-tlog-signature:
      pipelineTaskName: verify-tlog-signature
      status:
        completionTime: "2023-11-16T15:29:00Z"
        conditions:
        - lastTransitionTime: "2023-11-16T15:29:00Z"
          message: |
            "step-cosign-verify-image" exited with code 1 (image: "quay.io/redhat-gpte/cosign@sha256:e1c27a717c46656cadbc609a5c7c1a10e3f3c701f6a247365f8fd7a70226f746"); for logs run: kubectl -n ci logs app-globex-ui-pipeline-t20uuy-verify-tlog-signature-pod -c step-cosign-verify-image
          reason: Failed
          status: "False"
          type: Succeeded
        podName: app-globex-ui-pipeline-t20uuy-verify-tlog-signature-pod
        startTime: "2023-11-16T15:28:43Z"
        steps:
        - container: step-cosign-verify-image
          imageID: quay.io/redhat-gpte/cosign@sha256:e1c27a717c46656cadbc609a5c7c1a10e3f3c701f6a247365f8fd7a70226f746
          name: cosign-verify-image
          terminated:
            containerID: cri-o://c235511d2fe1a244477482efc108b942687fd07cb4b1ef7081c50917ef3ae030
            exitCode: 1
            finishedAt: "2023-11-16T15:28:56Z"
            reason: Error
            startedAt: "2023-11-16T15:28:54Z"
        - container: step-extract-signature-details
          imageID: quay.io/redhat-gpte/jq@sha256:8462cd1508761565c4e0b9a0d14a58d14583335abc2ac21dd70aff587b441f66
          name: extract-signature-details
          terminated:
            containerID: cri-o://e8cc82502cdcbede3ca0a9a919dc741c1a379852467457d932e0e8ce7e05fb7c
            exitCode: 1
            finishedAt: "2023-11-16T15:28:57Z"
            reason: Error
            startedAt: "2023-11-16T15:28:57Z"
        - container: step-rekor-search-sha
          imageID: quay.io/redhat-gpte/rekor-cli@sha256:0c9da8109f956e862059c57308178899007106c06eaf04af3d321b4bc3f704ba
          name: rekor-search-sha
          terminated:
            containerID: cri-o://6f5e3978345d718037936bbadc5806692529125ce857d4e5c1a41c918aa85a54
            exitCode: 1
            finishedAt: "2023-11-16T15:28:57Z"
            reason: Error
            startedAt: "2023-11-16T15:28:57Z"
        - container: step-rekor-extract-uuid
          imageID: quay.io/redhat-gpte/jq@sha256:8462cd1508761565c4e0b9a0d14a58d14583335abc2ac21dd70aff587b441f66
          name: rekor-extract-uuid
          terminated:
            containerID: cri-o://3a9f81fc1d4150c8a51bb8cbbbfeb4ee17cffafd2cd0165d0ae647f29efc6d19
            exitCode: 1
            finishedAt: "2023-11-16T15:28:58Z"
            reason: Error
            startedAt: "2023-11-16T15:28:58Z"
        - container: step-rekor-get-with-uuid
          imageID: quay.io/redhat-gpte/rekor-cli@sha256:0c9da8109f956e862059c57308178899007106c06eaf04af3d321b4bc3f704ba
          name: rekor-get-with-uuid
          terminated:
            containerID: cri-o://d53eedd49f3b18cf60f260d312fb7d56c89fb0d67f400e8c887498fecf2d2992
            exitCode: 1
            finishedAt: "2023-11-16T15:28:58Z"
            reason: Error
            startedAt: "2023-11-16T15:28:58Z"
        - container: step-verify-attestation
          imageID: quay.io/redhat-gpte/jq@sha256:8462cd1508761565c4e0b9a0d14a58d14583335abc2ac21dd70aff587b441f66
          name: verify-attestation
          terminated:
            containerID: cri-o://0fcb6bb99dd582319a815397afbd0231d00d6e5736fc1bfee26d9e036db7a8a0
            exitCode: 1
            finishedAt: "2023-11-16T15:28:59Z"
            reason: Error
            startedAt: "2023-11-16T15:28:59Z"
        taskSpec:
          params:
          - default: image-registry-secret
            name: registrySecret
            type: string
          - default: cosign-secret
            name: cosignSecret
            type: string
          - default: quay-8hvtv.apps.cluster-8hvtv.8hvtv.sandbox2411.opentlc.com/quayadmin/globex-ui:main-e39ea4710cfe0639f5343ef62695dae5f310d566
            name: image
            type: string
          steps:
          - env:
            - name: REGISTRY_SECRET
              valueFrom:
                secretKeyRef:
                  key: .dockerconfigjson
                  name: image-registry-secret
            - name: COSIGN_PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  key: cosign.pub
                  name: cosign-secret
            image: quay.io/redhat-gpte/cosign
            name: cosign-verify-image
            resources: {}
            script: |
              echo "${REGISTRY_SECRET}" > /home/cosign/.docker/config.json
              echo "${COSIGN_PUBLIC_KEY}" > /workspace/cosign.pub
              cosign verify --key /workspace/cosign.pub quay.apps.cluster-l6cp9.l6cp9.sandbox1607.opentlc.com/quayadmin/globex-ui:main-d92d5a055f1621ec7464f5c036b1eabc94b4bfaa --output-file /workspace/cosign.verify
          - image: quay.io/redhat-gpte/jq
            name: extract-signature-details
            resources: {}
            script: |
              cat /workspace/cosign.verify | jq --raw-output '.[0] | .critical | .image | .["docker-manifest-digest"]' > /workspace/cosign.sha
          - image: quay.io/redhat-gpte/rekor-cli
            name: rekor-search-sha
            resources: {}
            script: |
              rekor-cli search --sha $(cat /workspace/cosign.sha) --format json > /workspace/rekor.search
          - image: quay.io/redhat-gpte/jq
            name: rekor-extract-uuid
            resources: {}
            script: |
              cat /workspace/rekor.search | jq '.UUIDs[0]' | sed 's/\"//g' > /workspace/rekor.uuid
          - image: quay.io/redhat-gpte/rekor-cli
            name: rekor-get-with-uuid
            resources: {}
            script: |
              rekor-cli get --uuid $(cat /workspace/rekor.uuid) --format json > /workspace/rekor.get
          - image: quay.io/redhat-gpte/jq
            name: verify-attestation
            resources: {}
            script: |
              cat /workspace/rekor.get | jq -r .Attestation
