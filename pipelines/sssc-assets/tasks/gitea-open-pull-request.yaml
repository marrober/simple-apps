apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"globex-ui-pipeline-local-cluster"},"name":"gitea-open-pull-request","namespace":"ci"},"spec":{"description":"This task will open a PR on Github based on several parameters. This could be useful in GitOps repositories for example.","params":[{"default":"api.github.com","description":"The GitHub host, adjust this if you run a GitHub enteprise or Gitea\n","name":"GITHUB_HOST_URL","type":"string"},{"default":"","description":"The API path prefix, GitHub Enterprise has a prefix e.g. /api/v3\n","name":"API_PATH_PREFIX","type":"string"},{"description":"The GitHub repository full name, e.g.: tektoncd/catalog\n","name":"REPO_FULL_NAME","type":"string"},{"default":"github","description":"The name of the kubernetes secret that contains the GitHub token, default: github\n","name":"GITHUB_TOKEN_SECRET_NAME","type":"string"},{"default":"token","description":"The key within the kubernetes secret that contains the GitHub token, default: token\n","name":"GITHUB_TOKEN_SECRET_KEY","type":"string"},{"default":"Bearer","description":"The type of authentication to use. You could use the less secure \"Basic\" for example\n","name":"AUTH_TYPE","type":"string"},{"description":"The name of the branch where your changes are implemented.\n","name":"HEAD","type":"string"},{"description":"The name of the branch you want the changes pulled into.\n","name":"BASE","type":"string"},{"description":"The body description of the pull request.\n","name":"BODY","type":"string"},{"description":"The title of the pull request.\n","name":"TITLE","type":"string"}],"results":[{"description":"Number of the created pull request.","name":"NUMBER"},{"description":"URL of the created pull request.","name":"URL"}],"steps":[{"env":[{"name":"PULLREQUEST_NUMBER_PATH","value":"$(results.NUMBER.path)"},{"name":"PULLREQUEST_URL_PATH","value":"$(results.URL.path)"}],"image":"registry.access.redhat.com/ubi8/python-38:1","name":"open-pr","script":"#!/usr/libexec/platform-python\n\n\"\"\"This script will open a PR on Github\"\"\"\n\nimport json\nimport os\nimport sys\nimport http.client\n\ngithub_token = open(\"/etc/github-open-pr/$(params.GITHUB_TOKEN_SECRET_KEY)\", \"r\").read()\n\nopen_pr_url = \"$(params.API_PATH_PREFIX)\" + \"/repos/$(params.REPO_FULL_NAME)/pulls\"\n\ndata = {\n    \"head\": \"$(params.HEAD)\",\n    \"base\": \"$(params.BASE)\",\n    \"title\": \"\"\"$(params.TITLE)\"\"\",\n    \"body\": \"\"\"$(params.BODY)\"\"\"\n}\n\nprint(\"Sending this data to GitHub: \")\nprint(data)\n\nauthHeader = \"$(params.AUTH_TYPE) \" + github_token\n\n# Use http connection for insecure URLs\nif \"$(params.GITHUB_HOST_URL)\".startswith(\"http://\"):\n    conn = http.client.HTTPConnection(\"$(params.GITHUB_HOST_URL)\"\n                                      .replace(\"http://\", \"\"))\nelse:\n    conn = http.client.HTTPSConnection(\"$(params.GITHUB_HOST_URL)\")\n\nconn.request(\n    \"POST\",\n    open_pr_url,\n    body=json.dumps(data),\n    headers={\n        \"User-Agent\": \"OpenShift Pipelines\",\n        \"Authorization\": authHeader,\n        \"Accept\": \"application/vnd.github.v3+json \",\n        \"Content-Type\": \"application/json\"\n    })\nresp = conn.getresponse()\nif not str(resp.status).startswith(\"2\"):\n    print(\"Error: %d\" % (resp.status))\n    print(resp.read())\n    sys.exit(1)\nelse:\n    # https://docs.github.com/en/rest/reference/pulls#create-a-pull-request\n    body = json.loads(resp.read().decode())\n\n    open(os.environ.get('PULLREQUEST_NUMBER_PATH'), 'w').write(f'{body[\"number\"]}')\n    open(os.environ.get('PULLREQUEST_URL_PATH'), 'w').write(body[\"html_url\"])\n\n    print(\"GitHub pull request created for $(params.REPO_FULL_NAME): \"\n          f'number={body[\"number\"]} url={body[\"html_url\"]}')","volumeMounts":[{"mountPath":"/etc/github-open-pr","name":"githubtoken","readOnly":true}]}],"volumes":[{"name":"githubtoken","secret":{"secretName":"$(params.GITHUB_TOKEN_SECRET_NAME)"}}]}}
  creationTimestamp: "2023-11-14T12:33:33Z"
  generation: 1
  labels:
    app.kubernetes.io/instance: globex-ui-pipeline-local-cluster
  name: gitea-open-pull-request
  namespace: ci
  resourceVersion: "103483"
  uid: b2826d70-5134-4ef1-98ed-1733fe038cc2
spec:
  description: This task will open a PR on Github based on several parameters. This
    could be useful in GitOps repositories for example.
  params:
  - default: api.github.com
    description: |
      The GitHub host, adjust this if you run a GitHub enteprise or Gitea
    name: GITHUB_HOST_URL
    type: string
  - default: ""
    description: |
      The API path prefix, GitHub Enterprise has a prefix e.g. /api/v3
    name: API_PATH_PREFIX
    type: string
  - description: |
      The GitHub repository full name, e.g.: tektoncd/catalog
    name: REPO_FULL_NAME
    type: string
  - default: github
    description: |
      The name of the kubernetes secret that contains the GitHub token, default: github
    name: GITHUB_TOKEN_SECRET_NAME
    type: string
  - default: token
    description: |
      The key within the kubernetes secret that contains the GitHub token, default: token
    name: GITHUB_TOKEN_SECRET_KEY
    type: string
  - default: Bearer
    description: |
      The type of authentication to use. You could use the less secure "Basic" for example
    name: AUTH_TYPE
    type: string
  - description: |
      The name of the branch where your changes are implemented.
    name: HEAD
    type: string
  - description: |
      The name of the branch you want the changes pulled into.
    name: BASE
    type: string
  - description: |
      The body description of the pull request.
    name: BODY
    type: string
  - description: |
      The title of the pull request.
    name: TITLE
    type: string
  results:
  - description: Number of the created pull request.
    name: NUMBER
    type: string
  - description: URL of the created pull request.
    name: URL
    type: string
  steps:
  - env:
    - name: PULLREQUEST_NUMBER_PATH
      value: $(results.NUMBER.path)
    - name: PULLREQUEST_URL_PATH
      value: $(results.URL.path)
    image: registry.access.redhat.com/ubi8/python-38:1
    name: open-pr
    resources: {}
    script: |-
      #!/usr/libexec/platform-python

      """This script will open a PR on Github"""

      import json
      import os
      import sys
      import http.client

      github_token = open("/etc/github-open-pr/$(params.GITHUB_TOKEN_SECRET_KEY)", "r").read()

      open_pr_url = "$(params.API_PATH_PREFIX)" + "/repos/$(params.REPO_FULL_NAME)/pulls"

      data = {
          "head": "$(params.HEAD)",
          "base": "$(params.BASE)",
          "title": """$(params.TITLE)""",
          "body": """$(params.BODY)"""
      }

      print("Sending this data to GitHub: ")
      print(data)

      authHeader = "$(params.AUTH_TYPE) " + github_token

      # Use http connection for insecure URLs
      if "$(params.GITHUB_HOST_URL)".startswith("http://"):
          conn = http.client.HTTPConnection("$(params.GITHUB_HOST_URL)"
                                            .replace("http://", ""))
      else:
          conn = http.client.HTTPSConnection("$(params.GITHUB_HOST_URL)")

      conn.request(
          "POST",
          open_pr_url,
          body=json.dumps(data),
          headers={
              "User-Agent": "OpenShift Pipelines",
              "Authorization": authHeader,
              "Accept": "application/vnd.github.v3+json ",
              "Content-Type": "application/json"
          })
      resp = conn.getresponse()
      if not str(resp.status).startswith("2"):
          print("Error: %d" % (resp.status))
          print(resp.read())
          sys.exit(1)
      else:
          # https://docs.github.com/en/rest/reference/pulls#create-a-pull-request
          body = json.loads(resp.read().decode())

          open(os.environ.get('PULLREQUEST_NUMBER_PATH'), 'w').write(f'{body["number"]}')
          open(os.environ.get('PULLREQUEST_URL_PATH'), 'w').write(body["html_url"])

          print("GitHub pull request created for $(params.REPO_FULL_NAME): "
                f'number={body["number"]} url={body["html_url"]}')
    volumeMounts:
    - mountPath: /etc/github-open-pr
      name: githubtoken
      readOnly: true
  volumes:
  - name: githubtoken
    secret:
      secretName: $(params.GITHUB_TOKEN_SECRET_NAME)
